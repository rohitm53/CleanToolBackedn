{"version":3,"sources":["actions/types.js","reducers/errorReducer.js","reducers/serviceReducers.js","reducers/employeeReducer.js","reducers/assetReducer.js","reducers/companyServiceReducer.js","reducers/employeeServiceReducer.js","reducers/dashboardReducer.js","reducers/securityReducer.js","reducers/serviceRequestsReducer.js","reducers/companyAvailableTimeSlotsReducer.js","reducers/applicationReducer.js","reducers/index.js","store.js","securityUtils/setJWTTokenInHeader.js","actions/securityActions.js","components/layouts/NavBar.js","components/dashboard/Dashboard.js","actions/dashboardActions.js","actions/serviceActions.js","components/service/UpdateService.js","actions/employeeActions.js","components/custombuttons/AddEmployeeButton.js","components/employees/EmployeeItem.js","actions/applicationAction.js","components/employees/EmployeeListDashboard.js","components/employees/ConfirmEmployeeDetailsModal.js","components/common/commonbottonalert/BottomRedAlert.js","components/employees/AddEmployee.js","components/employees/UpdateEmployee.js","actions/companyServiceActions.js","components/service/AddService.js","components/service/CreateService.js","components/employees/EmployeeServiceCheckbox.js","components/employees/MapServiceToEmployee.js","actions/employeeServiceAction.js","actions/assetActions.js","components/asset/CreateAsset.js","components/custombuttons/AddAssetButton.js","components/asset/AssetItem.js","components/asset/AssetList.js","components/asset/UpdateAsset.js","components/layouts/Landing.js","components/usermanagement/RegisterCompany.js","components/usermanagement/Login.js","securityUtils/SecuredRoute.js","components/serviceRequests/ServiceReqestItem.js","components/serviceRequests/ServiceRequestDetailsModal.js","constants/Constants.js","actions/serviceRequestActions.js","components/serviceRequests/TimeSlotComponent.js","components/serviceRequests/ServiceRequestDashboard.js","actions/timeSlotsAction.js","components/common/fullPageloader/FullPageLoader.js","App.js","serviceWorker.js","index.js"],"names":["GET_ERRORS","initialState","services","service","employees","employee","intialState","assets","asset","companyService","intialstate","employeeService","availableResource","companySecurityInfo","validToken","booleanActionPayload","payload","service_requests","availableEmployees","available_time_slots","data","isLoading","combineReducers","application","state","action","type","security","errors","filter","serviceCode","employeeCode","code","dashboardState","serviceRequest","timeSlots","middleware","thunk","ReactReduxDevTools","window","__REDUX_DEVTOOLS_EXTENSION__","store","navigator","userAgent","includes","createStore","rootReducer","compose","applyMiddleware","setJWTTokenInHeader","token","axios","defaults","headers","common","logOut","dispatch","localStorage","removeItem","NavBar","e","props","location","href","headerLinks","this","userIsAuthenticated","className","to","data-toggle","data-target","id","role","aria-haspopup","aria-expanded","aria-labelledby","companyCode","onClick","userIsNotAuthenticated","Component","connect","Dashboard","serviceCount","employeeCount","assetCount","getItem","getDashboardReportbyCompanyCode","nextProps","setState","propType","PropTypes","object","isRequired","func","a","get","res","response","createService","history","post","push","UpdateService","onChange","target","name","value","onUpdate","preventDefault","updatedService","serviceName","noOfEmpReq","create_at","match","params","getServiceByid","onSubmit","bind","htmlFor","disabled","classnames","placeholder","postEmployee","getAllCompanyEmployees","AddEmployeeButton","Fragment","EmployeeItem","onEmployeeDelete","deleteEmployeeByCode","firstName","lastName","area","mobile","confirm","delete","resetErrorAction","EmployeeListDashboard","onSearchHit","setTimeout","class","aria-hidden","map","key","ConfirmEmployeeDetailsModal","middleName","email","dateOfBirth","gender","address","city","country","pinCode","errorMsg","AddEmployee","generateEmployeeObject","openComfirmModal","confirmModalShow","closeComfirmModal","checked","maxLength","Modal","show","onHide","size","backdrop","keyboard","centered","Header","closeButton","Title","Body","Footer","UpdateEmployee","console","log","created_at","getEmployeeByEmployeeCode","employeecode","getServiceByCompanyCode","AddService","onhandleChange","checked_service","service_item","concat","companyServiceReq","i","length","serviceCodes","addCompanyService","isServiceChecked","some","getAllServices","selected_service_section","readOnly","selected_service_section_Algorithm","CreateService","EmployeeServiceCheckbox","onServiceChecked","MapServiceToEmployee","hmEmployeeService","checkedStatus","has","arrServiceCode","set","item","employeeServiceRequest","employeeServices","keys","arrServiceCodes","postEmployeeService","hashmap","getCompanyEmployeeService","scope","array","company_selected_service","string","JSON","stringify","postAsset","CreateAsset","quantity","AddAssetButton","AssetItem","onDelete","deleteAssetByCode","AssetList","getAllCompanyAssets","UpdateAsset","getAssetByAssetCode","assetcode","Landing","RegisterCompany","onSubmite","newCompany","companyName","createNewCompany","Login","loginRequest","username","password","loginCompany","jwt","setItem","decoded","jwt_decode","jwtInfo","component","otherProps","render","ServiceReqestItem","onItemClick","openServiceReqDetailModal","scheduleTime","serviceReqCode","ServiceRequestDetailsModal","handleSelect","selection","selectedEmployee","statusCode","assignEmployeeRequest","assignedEmployeeCode","postAssignEmployeeRequest","closeServiceReqDetailModal","alert","availableEmployeeCode","arrAvailableEmployee","arrAllEmployee","forEach","assignEmployeeCol","options","getOptionLabel","getOptionValue","assignedEmployeeName","assignedEmployeeMobile","mobileUserName","mobileUserCode","scheduleDate","style","width","TimeSlotComponent","timeSlotsViews","availableTimeSlots","onGenerateTimeSlotsClicks","timeSlot","cardClass","availableEmployeeCount","time","ServiceRequestDashboard","serviceReq","request","showServiceReqDetailModal","selectedServiceReq","isRefresReq","getAllServiceRequest","getAllAvailableEmployees","date","selected_date","getCompanyAvailableTimeSlotsByDate","onDateSelected","currentDate","startTime","endTime","generateCompanyTimeSlotsForDate","Date","toISOString","split","serviceReqComponent","pendingReq","assignedReq","inProgressReq","completedReq","cancelledReq","FullPageLoader","src","jwtToken","sub","currentTime","now","exp","App","exact","path","Boolean","hostname","ReactDOM","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.736f8a7c.chunk.js","sourcesContent":["// Common\r\nexport const GET_ERRORS = \"GET_ERRORS\";\r\nexport const SHOW_LOADER = \"SHOW_LOADER\";\r\nexport const HIDE_LOADER = \"HIDE_LOADER\";\r\n\r\n//1. Login Actionss\r\nexport const SET_CURRENT_COMPANY = \"SET_CURRENT_COMPANY\";\r\nexport const LOGIN = \"LOGIN\";\r\n\r\n//2. Services Actions\r\nexport const GET_ALL_SERVICES = \"GET_ALL_SERVICES\";\r\nexport const GET_SERVICE_BY_ID = \"GET_SERVICE_BY_ID\";\r\nexport const DELETE_SERVICE_BY_ID = \"DELETE_SERVICE_BY_ID\";\r\n\r\n//3. Company Actions\r\nexport const GET_COMPANY_SERVICE_BY_COMPANY_CODE = \"GET_COMPANY_SERVICE_BY_COMPANY_CODE\";\r\n\r\n//4. Employee Actions\r\n\r\nexport const GET_ALL_EMPLOYEES = \"GET_ALL_EMPLOYEES\";\r\nexport const GET_ALL_COMPANY_EMPLOYEE = \"GET_ALL_COMPANY_EMPLOYEE\";\r\nexport const GET_EMPLOYEE_BY_EMPLOYEE_CODE = \"GET_EMPLOYEE_BY_EMPLOYEE_CODE\";\r\nexport const DELETE_EMPLOYEE_BY_ID = \"DELETE_EMPLOYEE_BY_ID\";\r\n\r\n//5. Company Employee Service Actions\r\nexport const GET_COMPANY_EMPLOYEE_SERVICE = \"GET_COMPANY_EMPLOYEE_SERVICE\";\r\n\r\n//6. Asset Actions\r\nexport const GET_ALL_ASSETS = \"GET_ALL_ASSETS\";\r\nexport const GET_ALL_ASSETS_BY_COMPANY_CODE = \"GET_ALL_ASSETS_BY_COMPANY_CODE\";\r\nexport const GET_ASSET_BY_ASSET_CODE = \"GET_ASSET_BY_ASSET_CODE\";\r\nexport const DELETE_ASSET_BY_ASSET_CODE = \"DELETE_ASSET_BY_ASSET_CODE\";\r\n\r\n//7. Dashboard Actions\r\nexport const GET_DASHBOARD_REPORT = \"GET_DASHBOARD_REPORT\";\r\n\r\n\r\n//8. Service Request Actions\r\nexport const GET_ALL_SERVICE_REQUEST=\"GET_ALL_SERVICE_REQUEST\";\r\nexport const POST_ASSIGN_EMPLOYEE_REQUEST=\"POST_ASSIGN_EMPLOYEE_REQUEST\";\r\nexport const GET_ALL_AVAILABLE_EMPLOYEE = \"GET_ALL_AVAILABLE_EMPLOYEE\";\r\n\r\n//9. Time Slots\r\nexport const GET_COMPANY_AVAILABLE_TIME_SLOTS_BY_DATE=\"GET_COMPANY_AVAILABLE_TIME_SLOTS_BY_DATE\";\r\nexport const POST_GENERATE_COMPANY_TIME_SLOTS_FOR_DATE = \"POST_GENERATE_COMPANY_TIME_SLOTS_FOR_DATE\";\r\n\r\n\r\n","import {GET_ERRORS} from '../actions/types';\r\n\r\nconst initialState = {\r\n};\r\n\r\nexport default function (state=initialState,action) {\r\n\r\n    switch (action.type) {\r\n    \r\n        default:\r\n            return state;\r\n\r\n        case GET_ERRORS:\r\n             return action.payload;\r\n        \r\n    }\r\n    \r\n}\r\n","import {\r\n    GET_ALL_SERVICES, GET_SERVICE_BY_ID, DELETE_SERVICE_BY_ID\r\n} from '../actions/types';\r\n\r\nconst initialState = {\r\n    services: [],\r\n    service: {}\r\n\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        default:\r\n            return state;\r\n        case GET_ALL_SERVICES:\r\n            return {\r\n                ...state,\r\n                services: action.payload\r\n            }\r\n        case GET_SERVICE_BY_ID:\r\n            return {\r\n                ...state,\r\n                service: action.payload\r\n            }\r\n        case DELETE_SERVICE_BY_ID:\r\n            return {\r\n                ...state,\r\n                services: state.services.filter(service => service.serviceCode !== action.payload)\r\n            }\r\n\r\n    }\r\n}","import {\r\n    GET_ALL_COMPANY_EMPLOYEE, GET_EMPLOYEE_BY_EMPLOYEE_CODE, DELETE_EMPLOYEE_BY_ID\r\n\r\n} from '../actions/types';\r\n\r\nconst initialState = {\r\n    employees: [],\r\n    employee: {}\r\n\r\n}\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        default:\r\n            return state;\r\n        case GET_ALL_COMPANY_EMPLOYEE:\r\n            return {\r\n                ...state,\r\n                employees: action.payload\r\n            }\r\n        case GET_EMPLOYEE_BY_EMPLOYEE_CODE:\r\n            return {\r\n                ...state,\r\n                employee: action.payload\r\n            }\r\n        case DELETE_EMPLOYEE_BY_ID:\r\n            return {\r\n                ...state,\r\n                employees: state.employees.filter(employee => employee.employeeCode !== action.payload)\r\n            }\r\n\r\n    }\r\n}","import { GET_ALL_ASSETS_BY_COMPANY_CODE, DELETE_ASSET_BY_ASSET_CODE, GET_ASSET_BY_ASSET_CODE } from \"../actions/types\";\r\n\r\nconst intialState = {\r\n    assets: [],\r\n    asset: {}\r\n}\r\n\r\nexport default function (state = intialState, action) {\r\n    switch (action.type) {\r\n        default:\r\n            return state;\r\n\r\n        case GET_ALL_ASSETS_BY_COMPANY_CODE:\r\n            return {\r\n                ...state,\r\n                assets: action.payload\r\n            };\r\n        case GET_ASSET_BY_ASSET_CODE:\r\n            return {\r\n                ...state,\r\n                asset: action.payload\r\n            }\r\n        case DELETE_ASSET_BY_ASSET_CODE:\r\n            return {\r\n                ...state,\r\n                assets: state.assets.filter(asset => asset.code !== action.payload)\r\n            }\r\n\r\n    }\r\n}","import { GET_COMPANY_SERVICE_BY_COMPANY_CODE } from \"../actions/types\";\r\n\r\nconst initialState = {\r\n    companyService: []\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n\r\n\r\n    switch (action.type) {\r\n        default:\r\n            return state;\r\n        case GET_COMPANY_SERVICE_BY_COMPANY_CODE:\r\n            return {\r\n                ...state,\r\n                companyService: action.payload\r\n            }\r\n    }\r\n\r\n}","import { GET_COMPANY_EMPLOYEE_SERVICE } from '../actions/types';\r\n\r\nconst intialstate = {\r\n    employeeService: []\r\n};\r\n\r\nexport default function (state = intialstate, action) {\r\n\r\n    switch (action.type) {\r\n        default:\r\n            return state;\r\n        case GET_COMPANY_EMPLOYEE_SERVICE:\r\n            return {\r\n                ...state,\r\n                employeeService: action.payload\r\n            }\r\n    }\r\n\r\n}","import { GET_DASHBOARD_REPORT } from \"../actions/types\";\r\n\r\nconst intialState = {\r\n    availableResource: {}\r\n}\r\n\r\nexport default function (state = intialState, action) {\r\n\r\n    switch (action.type) {\r\n        default:\r\n            return state;\r\n        case GET_DASHBOARD_REPORT:\r\n            return {\r\n                ...state,\r\n                availableResource: action.payload\r\n            }\r\n    }\r\n}","import { SET_CURRENT_COMPANY } from '../actions/types';\r\n\r\nconst initialState = {\r\n    companySecurityInfo: '',\r\n    validToken: false\r\n}\r\n\r\nconst booleanActionPayload = (payload) => {\r\n\r\n    if (payload) {\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n\r\n    switch (action.type) {\r\n\r\n        case SET_CURRENT_COMPANY:\r\n            return {\r\n                ...state,\r\n                companySecurityInfo: action.payload,\r\n                validToken: booleanActionPayload(action.payload)\r\n            }\r\n\r\n        default: return state\r\n    }\r\n\r\n}","import {\r\n    GET_ALL_AVAILABLE_EMPLOYEE,\r\n    GET_ALL_SERVICE_REQUEST,\r\n} from '../actions/types';\r\n\r\nconst initialState = {\r\n    service_requests:[],\r\n    availableEmployees:[]\r\n}\r\nexport default function (state=initialState,action) {\r\n\r\n    switch (action.type) {\r\n        default:\r\n            return state;\r\n\r\n        case GET_ALL_SERVICE_REQUEST : return { \r\n            ...state,\r\n            service_requests:action.payload.service_requests\r\n        }\r\n        case GET_ALL_AVAILABLE_EMPLOYEE : return {\r\n            ...state,\r\n            availableEmployees:action.payload.availableEmployees\r\n        }\r\n   \r\n    }\r\n    \r\n}","import {\r\n    GET_COMPANY_AVAILABLE_TIME_SLOTS_BY_DATE\r\n} from '../actions/types';\r\n\r\nconst initialState = {\r\n    available_time_slots:[]\r\n}\r\n\r\nexport default (state=initialState,action) => {\r\n    \r\n    switch(action.type){\r\n       \r\n        default:\r\n            return state;\r\n        \r\n        case GET_COMPANY_AVAILABLE_TIME_SLOTS_BY_DATE : return{\r\n            ...state,\r\n            available_time_slots: action.payload\r\n        }\r\n    }\r\n\r\n}","import { HIDE_LOADER, SHOW_LOADER } from \"../actions/types\";\r\n\r\nconst intialState  = {\r\n    data: {},\r\n    isLoading : false\r\n}\r\n\r\nexport default (state=intialState,action) => {\r\n\r\n     switch(action.type){\r\n         default: return state;\r\n\r\n         case SHOW_LOADER : return {\r\n             ...state,\r\n             isLoading : true\r\n         }\r\n\r\n         case HIDE_LOADER : return {\r\n            ...state,\r\n            isLoading : false\r\n        }\r\n     }\r\n\r\n}","import { combineReducers } from 'redux';\r\nimport errorReducer from './errorReducer';\r\nimport serviceReducers from './serviceReducers';\r\nimport employeeReducer from './employeeReducer';\r\nimport assetReducer from './assetReducer';\r\nimport companyServiceReducer from './companyServiceReducer';\r\nimport employeeServiceReducer from './employeeServiceReducer';\r\nimport dashboardReducer from './dashboardReducer';\r\nimport securityReducer from './securityReducer';\r\nimport serviceRequestsReducer from './serviceRequestsReducer';\r\nimport companyAvailableTimeSlotsReducer from './companyAvailableTimeSlotsReducer';\r\nimport applicationReducer from './applicationReducer';\r\n\r\nexport default combineReducers({\r\n    application:applicationReducer,\r\n    security: securityReducer,\r\n    errors: errorReducer,\r\n    service: serviceReducers,\r\n    companyService: companyServiceReducer,\r\n    employee: employeeReducer,\r\n    employeeService: employeeServiceReducer,\r\n    asset: assetReducer,\r\n    dashboardState: dashboardReducer,\r\n    serviceRequest:serviceRequestsReducer,\r\n    timeSlots:companyAvailableTimeSlotsReducer\r\n});","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst intialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nlet store;\r\n\r\nconst ReactReduxDevTools = window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n\r\nif (window.navigator.userAgent.includes(\"Chrome\") && ReactReduxDevTools) {\r\n    store = createStore(\r\n        rootReducer,\r\n        intialState,\r\n        compose(\r\n            applyMiddleware(...middleware), ReactReduxDevTools)\r\n    );\r\n} else {\r\n    store = createStore(\r\n        rootReducer,\r\n        intialState,\r\n        compose(applyMiddleware(...middleware))\r\n    );\r\n}\r\n\r\nexport default store;\r\n","import axios from 'axios';\r\n\r\nconst setJWTTokenInHeader = token => {\r\n    if (token) {\r\n        axios.defaults.headers.common[\"Authorization\"] = token;\r\n    } else {\r\n        delete axios.defaults.headers.common[\"Authorization\"];\r\n    }\r\n}\r\nexport default setJWTTokenInHeader;","import axios from 'axios';\r\nimport { GET_ERRORS, SET_CURRENT_COMPANY } from './types';\r\nimport setJWTTokenInHeader from '../securityUtils/setJWTTokenInHeader';\r\nimport jwt_decode from \"jwt-decode\";\r\n\r\nexport const createNewCompany = (newCompany, history) => async dispatch => {\r\n\r\n    try {\r\n\r\n        await axios.post(\"/api/users/company\", newCompany);\r\n        history.push(\"/login\");\r\n        dispatch({\r\n            type: GET_ERRORS,\r\n            payload: {}\r\n        });\r\n\r\n    } catch (err) {\r\n        dispatch({\r\n            type: GET_ERRORS,\r\n            payload: err.response.data\r\n        });\r\n    }\r\n\r\n}\r\n\r\nexport const loginCompany = (loginRequest) => async dispatch => {\r\n\r\n    try {\r\n        // Post => Login Request\r\n        const res = await axios.post(\"api/users/authenticate\", loginRequest)\r\n\r\n        // extract token from res.data\r\n        const { jwt } = res.data;\r\n\r\n        // store the token in local storage\r\n        localStorage.setItem(\"jwtToken\", jwt);\r\n        localStorage.setItem(\"companyCode\", loginRequest.username);\r\n\r\n        // set our token in header ***\r\n        setJWTTokenInHeader(jwt)\r\n\r\n        // decode token on React\r\n        const decoded = jwt_decode(jwt);  //Not decoding currently as no claims added\r\n\r\n        const companySecurityInfo = {\r\n            companyCode: loginRequest.username,\r\n            jwtInfo: decoded\r\n        };\r\n\r\n        //dispacch to securityReducer\r\n        dispatch({\r\n            type: SET_CURRENT_COMPANY,\r\n            payload: companySecurityInfo\r\n        });\r\n\r\n    } catch (err) {\r\n        dispatch({\r\n            type: GET_ERRORS,\r\n            payload: err.response.data\r\n        });\r\n    }\r\n}\r\n\r\n\r\nexport const logOut = () => dispatch => {\r\n    localStorage.removeItem(\"jwtToken\");\r\n    localStorage.removeItem(\"companyCode\");\r\n    setJWTTokenInHeader(false);\r\n    dispatch({\r\n        type: SET_CURRENT_COMPANY,\r\n        payload: {}\r\n    });\r\n\r\n}","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { logOut } from '../../actions/securityActions';\r\n\r\nclass NavBar extends Component {\r\n\r\n    logOut = (e) => {\r\n        this.props.logOut();\r\n        window.location.href = \"/\";\r\n    }\r\n\r\n    render() {\r\n\r\n        const { validToken, companySecurityInfo } = this.props.security;\r\n\r\n        const userIsAuthenticated = (\r\n            <div className=\"container\">\r\n                <Link to=\"/dashboard\" className=\"navbar-brand\">\r\n                    Clean Master\r\n                </Link>\r\n\r\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\"\r\n                    data-target=\"#mobile-nav\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n\r\n                <div className=\"collapse navbar-collapse\" id=\"mobile-nav\">\r\n\r\n                    <ul className=\"navbar-nav mr-auto\">\r\n                        <li className=\"nav-item dropdown\">\r\n                            <Link className=\"nav-link dropdown-toggle\" id=\"service\" \r\n                                  role=\"button\" \r\n                                  data-toggle=\"dropdown\" \r\n                                  aria-haspopup=\"true\" \r\n                                  aria-expanded=\"false\"> \r\n                                Services    \r\n                                </Link>\r\n\r\n                            <div className=\"dropdown-menu\" aria-labelledby=\"service\">\r\n                                <Link className=\"dropdown-item\" \r\n                                    to=\"/addservice\">Available Services</Link>\r\n                               \r\n                                <Link className=\"dropdown-item\">Manage Services</Link>\r\n                            </div>\r\n                        </li>\r\n\r\n                        <li className=\"nav-item dropdown\">\r\n                            <Link className=\"nav-link dropdown-toggle\" id=\"resources\" \r\n                                            role=\"button\" \r\n                                            data-toggle=\"dropdown\" \r\n                                            aria-haspopup=\"true\" \r\n                                            aria-expanded=\"false\"> \r\n                                Resources    \r\n                            </Link>\r\n\r\n                            <div className=\"dropdown-menu\" aria-labelledby=\"resources\">\r\n                                <Link className=\"dropdown-item\" \r\n                                     to=\"/employees\">Employee Management</Link>\r\n                                     \r\n                                <Link className=\"dropdown-item\" to=\"/assetlist\">Assets</Link>\r\n                            </div>\r\n                        </li>\r\n\r\n                        <li className=\"nav-item dropdown\">\r\n                            <Link className=\"nav-link dropdown-toggle\" id=\"transactions\" \r\n                                                role=\"button\" \r\n                                                data-toggle=\"dropdown\" \r\n                                                aria-haspopup=\"true\" \r\n                                                aria-expanded=\"false\"> \r\n                                Transactions    \r\n                                </Link>\r\n\r\n                            <div className=\"dropdown-menu\" aria-labelledby=\"transactions\">\r\n                                <Link className=\"dropdown-item\" to=\"/servicerequests\" \r\n                                        >Service Request</Link>\r\n                                <Link className=\"dropdown-item\">Assigned Employee</Link>\r\n                            </div>\r\n                        </li>\r\n\r\n                    </ul>\r\n\r\n                    <ul className=\"navbar-nav ml-auto\">\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link\" to=\"/updatecontacts\">\r\n                                <i className=\"fas fa-user-circle mr-1\"></i> {companySecurityInfo.companyCode}\r\n                            </Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link to=\"/logout\" className=\"nav-link\"\r\n                                onClick={this.logOut}>\r\n                                Logout\r\n                            </Link>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n\r\n            </div>\r\n\r\n        );\r\n\r\n        const userIsNotAuthenticated = (\r\n            <div className=\"container\">\r\n                <Link to=\"/\" className=\"navbar-brand\">\r\n                    Clean Master\r\n                </Link>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\"\r\n                    data-target=\"#mobile-nav\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n\r\n                <div className=\"collapse navbar-collapse\" id=\"mobile-nav\">\r\n                    <ul className=\"navbar-nav ml-auto\">\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link\" to=\"/registercompany\">Register</Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link to=\"/login\" className=\"nav-link\">Login</Link>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n\r\n            </div>\r\n\r\n        );\r\n\r\n        let headerLinks;\r\n\r\n        if (validToken && companySecurityInfo.companyCode != null) {\r\n            headerLinks = userIsAuthenticated;\r\n        } else {\r\n            headerLinks = userIsNotAuthenticated;\r\n        }\r\n\r\n\r\n\r\n        return (\r\n            <div>\r\n                <nav className=\"navbar navbar-expand-sm navbar-dark\">\r\n                    {headerLinks}\r\n                </nav>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nNavBar.propTypes = {\r\n    logOut: PropTypes.func.isRequired,\r\n    security: PropTypes.object.isRequired\r\n}\r\n\r\nconst mapStateToProp = (state) => ({\r\n    security: state.security\r\n})\r\n\r\nexport default connect(mapStateToProp, { logOut })(NavBar);\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux';\r\nimport { getDashboardReportbyCompanyCode } from '../../actions/dashboardActions';\r\n\r\nclass Dashboard extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            serviceCount: 0,\r\n            employeeCount: 0,\r\n            assetCount: 0\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const companyCode = localStorage.getItem(\"companyCode\");\r\n        this.props.getDashboardReportbyCompanyCode(companyCode);\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if (nextProps.availableResource) {\r\n            const { availableResource } = nextProps;\r\n            this.setState({\r\n                serviceCount: availableResource.serviceCount,\r\n                employeeCount: availableResource.employeeCount,\r\n                assetCount: availableResource.assetCount\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container mt-3\">\r\n               \r\n                <div className=\"row mt-2\">\r\n                    <div className=\"col-6\">\r\n                        <b className=\"text-muted\">Available Resource</b>\r\n                        <table className=\"table table-bordered text-center table-secondary\">\r\n                            <thead className=\"bg-danger\">\r\n                                <tr className=\"text-white\">\r\n                                    <th>Service</th>\r\n                                    <th>Employee</th>\r\n                                    <th>Assets</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td>{this.state.serviceCount}</td>\r\n                                    <td>{this.state.employeeCount}</td>\r\n                                    <td>{this.state.assetCount}</td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nDashboard.propType = {\r\n    availableResource: PropTypes.object.isRequired,\r\n    getDashboardReportbyCompanyCode: PropTypes.func.isRequired,\r\n}\r\n\r\nconst mapStateToProp = state => ({\r\n    availableResource: state.dashboardState.availableResource,\r\n});\r\n\r\nexport default connect(mapStateToProp, { getDashboardReportbyCompanyCode })(Dashboard);\r\n","import axios from 'axios';\r\nimport { GET_ERRORS, GET_DASHBOARD_REPORT } from './types';\r\n\r\nexport const getDashboardReportbyCompanyCode = (companyCode) => async dispatch => {\r\n\r\n    try {\r\n\r\n        const res = await axios.get(`/api/company/dashboard/${companyCode}`);\r\n        dispatch({\r\n            type: GET_DASHBOARD_REPORT,\r\n            payload: res.data\r\n        });\r\n\r\n    } catch (err) {\r\n        dispatch({\r\n            type: GET_ERRORS,\r\n            payload: err.response.data\r\n        })\r\n    }\r\n\r\n}","import axios from 'axios';\r\nimport {\r\n    GET_ERRORS, GET_ALL_SERVICES, GET_SERVICE_BY_ID, DELETE_SERVICE_BY_ID,\r\n\r\n} from './types';\r\n\r\nexport const createService = (service, history) => async dispatch => {\r\n\r\n    try {\r\n        await axios.post(\"/api/services\", service);\r\n        history.push(\"/\");\r\n        dispatch({\r\n            type: GET_ERRORS,\r\n            payload: {}\r\n        });\r\n    } catch (err) {\r\n        dispatch({\r\n            type: GET_ERRORS,\r\n            payload: err.response.data\r\n        });\r\n    }\r\n}\r\n\r\nexport const getAllServices = () => async dispatch => {\r\n    try {\r\n        const res = await axios.get(\"api/services/all\");\r\n        dispatch({\r\n            type: GET_ALL_SERVICES,\r\n            payload: res.data\r\n        });\r\n    } catch (err) {\r\n        dispatch({\r\n            type: GET_ERRORS,\r\n            payload: err.response.data\r\n        });\r\n    }\r\n}\r\n\r\nexport const getServiceByid = (id, history) => async dispatch => {\r\n    try {\r\n        const res = await axios.get(`/api/services/${id}`);\r\n        dispatch({\r\n            type: GET_SERVICE_BY_ID,\r\n            payload: res.data\r\n        });\r\n    } catch (err) {\r\n        history.push(\"/\");\r\n    }\r\n}\r\n\r\nexport const deleteService = (id) => async dispatch => {\r\n\r\n    try {\r\n        if (window.confirm(\"Are you sure you want to delete this service\")) {\r\n            await axios.delete(`api/services/${id}`);\r\n            dispatch({\r\n                type: DELETE_SERVICE_BY_ID,\r\n                payload: id\r\n            });\r\n        }\r\n    } catch (err) {\r\n        dispatch({\r\n            type: GET_ERRORS,\r\n            payload: err.response.data\r\n        });\r\n    }\r\n\r\n}\r\n","import React, { Component } from 'react';\r\nimport classnames from 'classnames';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { getServiceByid, createService } from '../../actions/serviceActions';\r\n\r\nclass UpdateService extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            id: '',\r\n            serviceCode: '',\r\n            serviceName: '',\r\n            noOfEmpReq: '',\r\n            create_at: '',\r\n            errors: {}\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { serviceCode } = this.props.match.params;\r\n        this.props.getServiceByid(serviceCode, this.props.history);\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n\r\n        if (nextProps.errors) {\r\n            this.setState({ errors: nextProps.errors });\r\n        }\r\n\r\n        const {\r\n            id,\r\n            serviceCode,\r\n            serviceName,\r\n            noOfEmpReq,\r\n            create_at,\r\n        } = nextProps.service;\r\n\r\n        this.setState({\r\n            id,\r\n            serviceCode,\r\n            serviceName,\r\n            noOfEmpReq,\r\n            create_at\r\n        });\r\n    }\r\n\r\n    onChange = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    }\r\n\r\n    onUpdate = (e) => {\r\n        e.preventDefault();\r\n\r\n        const updatedService = {\r\n            id: this.state.id,\r\n            serviceCode: this.state.serviceCode,\r\n            serviceName: this.state.serviceName,\r\n            noOfEmpReq: this.state.noOfEmpReq,\r\n            create_at: this.state.create_at\r\n        }\r\n\r\n        this.props.createService(updatedService, this.props.history);\r\n    }\r\n\r\n    render() {\r\n        const { errors } = this.state;\r\n        return (\r\n            <div className=\"container mt-3\">\r\n                <h4 className=\"display-4 text-primary text-center\">Update Service</h4>\r\n                <hr />\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-8 m-auto\">\r\n                        <form onSubmit={this.onUpdate.bind(this)}>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"servicecode\">Service Code</label>\r\n                                <input type=\"text\" className=\"form-control form-control-lg\"\r\n                                    name=\"serviceCode\"\r\n                                    value={this.state.serviceCode}\r\n                                    disabled\r\n                                />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"servicename\">Service Name</label>\r\n                                <input type=\"text\" className={classnames(\"form-control form-control-lg\", {\r\n                                    \"is-invalid\": errors.serviceName\r\n                                })}\r\n                                    placeholder=\"Service Name\"\r\n                                    name=\"serviceName\"\r\n                                    value={this.state.serviceName}\r\n                                    onChange={this.onChange}\r\n                                />\r\n                                {\r\n                                    errors.serviceName && (\r\n                                        <div className=\"invalid-feedback\">{errors.serviceName}</div>\r\n                                    )\r\n                                }\r\n                            </div>\r\n                            <div className=\"form-row\">\r\n                                <div className=\"col\">\r\n                                    <div className=\"form-group\">\r\n                                        <label htmlFor=\"employeenumber\">No. of Employee</label>\r\n                                        <input type=\"number\" className=\"form-control form-control-lg\"\r\n                                            name=\"noOfEmpReq\"\r\n                                            value={this.state.noOfEmpReq}\r\n                                            onChange={this.onChange}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"col\"></div>\r\n                            </div>\r\n                            <input type=\"submit\" value=\"Update\" className=\"btn btn-primary btn-block\" />\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nUpdateService.propTypes = {\r\n    service: PropTypes.object.isRequired,\r\n    getServiceByid: PropTypes.func.isRequired,\r\n    createService: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProp = state => ({\r\n    service: state.service.service,\r\n    errors: state.errors\r\n});\r\n\r\n\r\nexport default connect(mapStateToProp, { getServiceByid, createService })(UpdateService);\r\n","import axios from 'axios';\r\nimport {\r\n    GET_ERRORS, GET_ALL_EMPLOYEES, GET_ALL_COMPANY_EMPLOYEE, GET_EMPLOYEE_BY_EMPLOYEE_CODE,\r\n    DELETE_EMPLOYEE_BY_ID\r\n} from './types';\r\n\r\nexport const postEmployee = (employee, history) => async dispatch => {\r\n    try {\r\n        await axios.post(\"/api/company/employee\", employee);\r\n        history.push(\"/employees\");\r\n        dispatch({\r\n            type: GET_ERRORS,\r\n            payload: {}\r\n        });\r\n    } catch (err) {\r\n        dispatch({\r\n            type: GET_ERRORS,\r\n            payload: err.response.data\r\n        });\r\n    }\r\n}\r\n\r\nexport const getEmployees = () => async dispatch => {\r\n    try {\r\n        const res = await axios.get('/api/company/employee/all');\r\n        dispatch({\r\n            type: GET_ALL_EMPLOYEES,\r\n            payload: res.data\r\n        });\r\n    } \r\n    catch (err) {\r\n        dispatch({\r\n            type: GET_ERRORS,\r\n            payload: err.response.data\r\n        });\r\n    }\r\n}\r\n\r\nexport const getAllCompanyEmployees = () => async dispatch => {\r\n    try {\r\n        const res = await axios.get(\"/api/company/employee/company-employee\");\r\n        dispatch({\r\n            type: GET_ALL_COMPANY_EMPLOYEE,\r\n            payload: res.data\r\n        });\r\n    } catch (err) {\r\n        dispatch({\r\n            type: GET_ERRORS,\r\n            payload: err.response.data\r\n        });\r\n    }\r\n}\r\n\r\nexport const getEmployeeByEmployeeCode = (employeeCode) => async dispatch => {\r\n\r\n    try {\r\n\r\n        const res = await axios.get(`/api/company/employee/${employeeCode}`);\r\n        dispatch({\r\n            type: GET_EMPLOYEE_BY_EMPLOYEE_CODE,\r\n            payload: res.data\r\n        });\r\n\r\n    } catch (err) {\r\n        dispatch({\r\n            type: GET_ERRORS,\r\n            payload: err.response.data\r\n        });\r\n    }\r\n\r\n}\r\n\r\nexport const deleteEmployeeByCode = (employeeCode) => async dispatch => {\r\n\r\n    try {\r\n        if (window.confirm(\"Are you sure you want to delete this employee\")) {\r\n            await axios.delete(`/api/company/employee/${employeeCode}`);\r\n            dispatch({\r\n                type: DELETE_EMPLOYEE_BY_ID,\r\n                payload: employeeCode\r\n            });\r\n        }\r\n\r\n    } catch (err) {\r\n        dispatch({\r\n            type: GET_ERRORS,\r\n            payload: err.response.data\r\n        });\r\n    }\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport {Link} from 'react-router-dom'\r\n\r\nconst AddEmployeeButton = (props) => {\r\n    return(\r\n        <React.Fragment>\r\n            <Link className=\"btn btn-primary\" to=\"/addemployee\">Add Employee</Link>\r\n        </React.Fragment>\r\n    );\r\n}\r\nexport default AddEmployeeButton;\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { deleteEmployeeByCode } from '../../actions/employeeActions';\r\n\r\nclass EmployeeItem extends Component {\r\n\r\n    onEmployeeDelete = (employeeCode) => {\r\n        this.props.deleteEmployeeByCode(employeeCode);\r\n    }\r\n    render() {\r\n        const { employee } = this.props;\r\n        return (\r\n            <div className=\"container mb-3\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-header employee-card-header text-white\">\r\n                        {employee.firstName + \" \" + employee.lastName}  ({employee.employeeCode})\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-6\">\r\n                                <h4 className=\"card-title\">{employee.area}</h4>\r\n                                <p className=\"card-text\">{employee.mobile}</p>\r\n                            </div>\r\n                            <div className=\"col-md-4\">\r\n                                <Link to={`/updateemployee/${employee.employeeCode}`} className=\"btn btn-info mb-2\">Update</Link>\r\n                                <button className=\"btn btn-danger\" onClick={this.onEmployeeDelete.bind(this, employee.employeeCode)}>\r\n                                    Delete\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nEmployeeItem.propTypes = {\r\n    deleteEmployeeByCode: PropTypes.func.isRequired\r\n}\r\nexport default connect(null, { deleteEmployeeByCode })(EmployeeItem);\r\n","import { HIDE_LOADER, SHOW_LOADER ,GET_ERRORS } from \"./types\";\r\n\r\nexport const showLoader = () => dispatch =>  {\r\n    dispatch({\r\n        type:SHOW_LOADER,\r\n    });\r\n}\r\n\r\nexport const hideLoader = () => dispatch =>  {\r\n    dispatch({\r\n        type:HIDE_LOADER,\r\n    });\r\n}\r\n\r\nexport const resetErrorAction = () => dispatch => {\r\n    dispatch({\r\n        type: GET_ERRORS,\r\n        payload: {}\r\n    });\r\n}","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport store from '../../store';\r\nimport { getAllCompanyEmployees } from '../../actions/employeeActions';\r\nimport AddEmployeeButton from '../custombuttons/AddEmployeeButton';\r\nimport EmployeeItem from './EmployeeItem';\r\nimport {showLoader,hideLoader} from '../../actions/applicationAction';\r\n\r\nclass EmployeeListDashboard extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.getAllCompanyEmployees();\r\n    }\r\n\r\n    onSearchHit = () => {\r\n        store.dispatch(showLoader());\r\n        setTimeout(()=> {\r\n            store.dispatch(hideLoader());\r\n        },3000);\r\n    }\r\n\r\n    render() {\r\n        const employees = this.props.employee.employees;\r\n        return (\r\n            <div className=\"container-fluid mt-3\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-6\">\r\n                        <div className=\"input-group\">\r\n                            <input type=\"text\" placeholder=\"--Search Employee by name/code/phone/email.\" className=\"form-control\" />\r\n                            <div className=\"input-group-append\">\r\n                                   <span className=\"input-group-text\" onClick={this.onSearchHit.bind(this)}>\r\n                                       <i class=\"fa fa-search\" aria-hidden=\"true\"></i>\r\n                                   </span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-md-3 ml-auto\">\r\n                            <AddEmployeeButton />\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"row wrapper-4-item my-4\">\r\n                    {\r\n                        employees.map(employee => {\r\n                            return (<EmployeeItem key={employee.employeeCode} employee={employee} />)\r\n                        })\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nEmployeeListDashboard.propTypes = {\r\n    getAllCompanyEmployees: PropTypes.func.isRequired,\r\n    employee: PropTypes.object.isRequired,\r\n    companyCode: PropTypes.string.isRequired\r\n}\r\n\r\nconst mapStateToProp = state => ({\r\n    employee: state.employee,\r\n    companyCode: state.security.companySecurityInfo.companyCode\r\n})\r\n\r\nexport default connect(mapStateToProp, { getAllCompanyEmployees })(EmployeeListDashboard);\r\n","import React, { Component } from 'react'\r\n\r\nclass ConfirmEmployeeDetailsModal extends Component {\r\n\r\n    render() {\r\n\r\n        const {employee} = this.props;\r\n\r\n        return (\r\n            <div className=\"card-body\">\r\n                <div className=\"row\">\r\n                    <div className=\"col\">\r\n                        <p className=\"d-inline text-lg h6\">Full Name :</p>\r\n                        <p className=\"d-inline\"> \r\n                                {employee.firstName + \" \"+ employee.middleName +\" \" + employee.lastName}\r\n                        </p>\r\n\r\n                        <br/>\r\n\r\n                        <p className=\"d-inline text-lg h6\">Mobile :</p>\r\n                        <p className=\"d-inline\"> {employee.mobile}</p>\r\n\r\n                        <br/>\r\n\r\n                        <p className=\"d-inline text-lg h6\">Email :</p>\r\n                        <p className=\"d-inline\"> {employee.email}</p>\r\n                    </div>\r\n\r\n                    <div className=\"col\">\r\n                        <p className=\"d-inline text-lg h6\">Date of Birth :</p>\r\n                        <p className=\"d-inline\"> {employee.dateOfBirth}</p>\r\n                        <br/>\r\n                        <p className=\"d-inline text-lg h6\">Gender :</p>\r\n                        <p className=\"d-inline\"> {employee.gender}</p>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"row\">\r\n                    <div className=\"col\">\r\n                        <p className=\"d-inline text-lg h6\"> Adress : </p>\r\n                        <p className=\"d-inline\">\r\n                            {employee.address + \r\n                            employee.area +   \r\n                            employee.city + \r\n                            employee.country +\r\n                            employee.pinCode}\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ConfirmEmployeeDetailsModal;\r\n","import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\n const BottomRedAlert = (props)=> {\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"row \">\r\n                <div className=\"col\">\r\n                    <div class=\"alert alert-danger text-center\" role=\"alert\">\r\n                        {props.errorMsg}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n       \r\n    )\r\n}\r\nconst mapStateToProp = ()=> ({\r\n\r\n})\r\nexport default connect(mapStateToProp)(BottomRedAlert); \r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport classnames from 'classnames';\r\nimport { postEmployee } from '../../actions/employeeActions';\r\nimport { Modal } from 'react-bootstrap';\r\nimport ConfirmEmployeeDetailsModal from './ConfirmEmployeeDetailsModal';\r\nimport BottomRedAlert from '../common/commonbottonalert/BottomRedAlert';\r\nimport {resetErrorAction} from '../../actions/applicationAction';\r\n\r\nclass AddEmployee extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            firstName: '',\r\n            middleName: '',\r\n            lastName: '',\r\n            gender: '',\r\n            dateOfBirth: '',\r\n            mobile: '',\r\n            email: '',\r\n            area: '',\r\n            address: '',\r\n            city: '',\r\n            country: '',\r\n            pinCode: '',\r\n            companyCode: '',\r\n            errors: {},\r\n            confirmModalShow : false\r\n        }\r\n    }\r\n\r\n    onChange = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    }\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        const employee = this.generateEmployeeObject();\r\n        this.props.postEmployee(employee, this.props.history);\r\n    }\r\n\r\n\r\n    generateEmployeeObject() {\r\n\r\n        const employee = {\r\n            firstName: this.state.firstName,\r\n            middleName: this.state.middleName,\r\n            lastName: this.state.lastName,\r\n            gender: this.state.gender,\r\n            dateOfBirth: this.state.dateOfBirth,\r\n            mobile: this.state.mobile,\r\n            email: this.state.email,\r\n            area: this.state.area,\r\n            address: this.state.address,\r\n            city: this.state.city,\r\n            country: this.state.country,\r\n            pinCode: this.state.pinCode,\r\n            companyCode: this.props.companyCode\r\n        }\r\n         return employee;\r\n    }\r\n\r\n   \r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if (nextProps.errors) {\r\n            this.setState({\r\n                 errors: nextProps.errors ,\r\n                 confirmModalShow:false\r\n            });\r\n        }\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        this.props.resetErrorAction();\r\n      }\r\n\r\n    openComfirmModal = (e) => {\r\n        e.preventDefault();\r\n        this.setState({confirmModalShow:true})\r\n    }\r\n\r\n    closeComfirmModal = () => {\r\n        this.setState({confirmModalShow:false})\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const { errors } = this.state;\r\n\r\n        return (\r\n            <div className=\"container mt-3\">\r\n                <h4 className=\"display-4 text-primary text-center\">Add Employee</h4>\r\n                <hr />\r\n                <div className=\"row\">\r\n                    <div className=\"col\">\r\n                        <form onSubmit={this.openComfirmModal.bind(this)}>\r\n                            <div className=\"form-row\">\r\n                                <div className=\"form-group col-md-4\">\r\n                                    <label htmlFor=\"firstName\">First Name *</label>\r\n                                    <input type=\"text\"\r\n                                        className={classnames(\"form-control\", { \"is-invalid\": errors.firstName })}\r\n                                        placeholder=\"First Name\"\r\n                                        name=\"firstName\"\r\n                                        value={this.state.firstName}\r\n                                        onChange={this.onChange}\r\n                                    />\r\n                                    {\r\n                                        errors.firstName && (\r\n                                            <div className=\"invalid-feedback\">{errors.firstName}</div>\r\n                                        )\r\n                                    }\r\n                                </div>\r\n                                <div className=\"form-group col-md-4\">\r\n                                    <label htmlFor=\"middlename\">Middle Name</label>\r\n                                    <input type=\"text\"\r\n                                        className={classnames(\"form-control\", { \"is-invalid\": errors.middleName })}\r\n                                        placeholder=\"Middle Name\"\r\n                                        name=\"middleName\"\r\n                                        value={this.state.middleName}\r\n                                        onChange={this.onChange}\r\n                                    />\r\n                                    {\r\n                                        errors.middleName && (\r\n                                            <div className=\"invalid-feedback\">{errors.middleName}</div>\r\n                                        )\r\n                                    }\r\n                                </div>\r\n                                <div className=\"form-group col-md-4\">\r\n                                    <label htmlFor=\"lastName\">Last Name *</label>\r\n                                    <input type=\"text\"\r\n                                        className={classnames(\"form-control\", { \"is-invalid\": errors.lastName })}\r\n                                        placeholder=\"Last Name\"\r\n                                        name=\"lastName\"\r\n                                        value={this.state.lastName}\r\n                                        onChange={this.onChange}\r\n                                    />\r\n                                    {\r\n                                        errors.lastName && (\r\n                                            <div className=\"invalid-feedback\">{errors.lastName}</div>\r\n                                        )\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-row\">\r\n                                <div className=\"form-group col-md-6\">\r\n                                    <label htmlFor=\"dob\">Date of Birth</label>\r\n                                    <input type=\"date\"\r\n                                        className={classnames(\"form-control\", { \"is-invalid\": errors.dateOfBirth })}\r\n                                        placeholder=\"Date of Birth\"\r\n                                        name=\"dateOfBirth\"\r\n                                        value={this.state.dateOfBirth}\r\n                                        onChange={this.onChange}\r\n                                    />\r\n                                    {\r\n                                        errors.dateOfBirth && (\r\n                                            <div className=\"invalid-feedback\">{errors.dateOfBirth}</div>\r\n                                        )\r\n                                    }\r\n                                </div>\r\n                                <div className=\"form-group col-md-6 mt-4 pt-3\">\r\n                                    <label htmlFor=\"gender\" className=\"mr-3\">Gender * </label>\r\n                                    <div className=\"form-check form-check-inline\">\r\n                                        <input className=\"form-check-input\" type=\"radio\" name=\"gender\" id=\"male\" value=\"male\"\r\n                                            checked={this.state.gender === 'male'}\r\n                                            onChange={this.onChange}\r\n                                        />\r\n                                        <label className=\"form-check-label\">Male</label>\r\n                                    </div>\r\n                                    <div className=\"form-check form-check-inline mr-5\">\r\n                                        <input className=\"form-check-input\" type=\"radio\" name=\"gender\" id=\"female\" value=\"female\"\r\n                                            checked={this.state.gender === 'female'}\r\n                                            onChange={this.onChange}\r\n                                        />\r\n                                        <label className=\"form-check-label\">Female</label>\r\n                                    </div>\r\n                                    {\r\n                                        errors.gender && (\r\n                                            <div className=\"invalid-feedback\">{errors.gender}</div>\r\n                                        )\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-row\">\r\n                                <div className=\"form-group col-md-6\">\r\n                                    <label htmlFor=\"mobile\">Mobile *</label>\r\n                                    <input type=\"number\"\r\n                                        className={classnames(\"form-control\", { \"is-invalid\": errors.mobile })}\r\n                                        placeholder=\"Mobile\" maxLength=\"10\"\r\n                                        name=\"mobile\"\r\n                                        value={this.state.mobile}\r\n                                        onChange={this.onChange}\r\n                                    />\r\n                                    {\r\n                                        errors.mobile && (\r\n                                            <div className=\"invalid-feedback\">{errors.mobile}</div>\r\n                                        )\r\n                                    }\r\n                                </div>\r\n                                <div className=\"form-group col-md-6\">\r\n                                    <label htmlFor=\"email\">Email *</label>\r\n                                    <input type=\"text\"\r\n                                        className={classnames(\"form-control\", { \"is-invalid\": errors.email })}\r\n                                        placeholder=\"Email\"\r\n                                        name=\"email\"\r\n                                        value={this.state.email}\r\n                                        onChange={this.onChange}\r\n                                    />\r\n                                    {\r\n                                        errors.email && (\r\n                                            <div className=\"invalid-feedback\">{errors.email}</div>\r\n                                        )\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-row\">\r\n                                <div className=\"form-group col-md-4\">\r\n                                    <label htmlFor=\"address\">Address *</label>\r\n                                    <textarea type=\"text\"\r\n                                        className={classnames(\"form-control\", { \"is-invalid\": errors.address })}\r\n                                        placeholder=\"Address\"\r\n                                        name=\"address\"\r\n                                        value={this.state.address}\r\n                                        onChange={this.onChange}\r\n                                    ></textarea>\r\n                                    {\r\n                                        errors.email && (\r\n                                            <div className=\"invalid-feedback\">{errors.address}</div>\r\n                                        )\r\n                                    }\r\n                                </div>\r\n                                <div className=\"form-group col-md-4\">\r\n                                    <label htmlFor=\"area\">Area *</label>\r\n                                    <input type=\"text\"\r\n                                        className={classnames(\"form-control\", { \"is-invalid\": errors.area })}\r\n                                        placeholder=\"Area\"\r\n                                        name=\"area\"\r\n                                        value={this.state.area}\r\n                                        onChange={this.onChange}\r\n                                    />\r\n                                    {\r\n                                        errors.area && (\r\n                                            <div className=\"invalid-feedback\">{errors.area}</div>\r\n                                        )\r\n                                    }\r\n                                </div>\r\n                                <div className=\"form-group col-md-4\">\r\n                                    <label htmlFor=\"city\">City *</label>\r\n                                    <input type=\"text\"\r\n                                        className={classnames(\"form-control\", { \"is-invalid\": errors.city })}\r\n                                        placeholder=\"City\"\r\n                                        name=\"city\"\r\n                                        value={this.state.city}\r\n                                        onChange={this.onChange}\r\n                                    />\r\n                                    {\r\n                                        errors.city && (\r\n                                            <div className=\"invalid-feedback\">{errors.city}</div>\r\n                                        )\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-row\">\r\n                                <div className=\"form-group col-md-4\">\r\n                                    <label htmlFor=\"country\">Country *</label>\r\n                                    <input type=\"text\"\r\n                                        className={classnames(\"form-control\", { \"is-invalid\": errors.country })}\r\n                                        placeholder=\"City\"\r\n                                        name=\"country\"\r\n                                        value={this.state.country}\r\n                                        onChange={this.onChange}\r\n                                    />\r\n                                    {\r\n                                        errors.country && (\r\n                                            <div className=\"invalid-feedback\">{errors.country}</div>\r\n                                        )\r\n                                    }\r\n                                </div>\r\n                                <div className=\"form-group col-md-4\">\r\n                                    <label htmlFor=\"pinCode\">Pincode *</label>\r\n                                    <input type=\"text\"\r\n                                        className={classnames(\"form-control\", { \"is-invalid\": errors.pinCode })}\r\n                                        placeholder=\"Pincode\"\r\n                                        name=\"pinCode\"\r\n                                        value={this.state.pinCode}\r\n                                        onChange={this.onChange}\r\n                                    />\r\n                                    {\r\n                                        errors.pinCode && (\r\n                                            <div className=\"invalid-feedback\">{errors.pinCode}</div>\r\n                                        )\r\n                                    }\r\n                                </div>\r\n                                <div className=\"form-group col-md-4 text-center\">\r\n                                    <input type=\"submit\" value=\"Submit\" className=\"btn btn-primary mt-4 mb-3\" />\r\n                                </div>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n                {\r\n                    errors.errorMsg && (\r\n                        <BottomRedAlert \r\n                             errorMsg = {errors.errorMsg}\r\n                        />\r\n                    )\r\n                }\r\n                <Modal show={this.state.confirmModalShow} \r\n                       onHide={this.closeComfirmModal} \r\n                       size=\"lg\"\r\n                       backdrop=\"static\"\r\n                       keyboard={false}\r\n                       centered \r\n                >\r\n\r\n                    <Modal.Header closeButton>\r\n                         <Modal.Title>Confirm Employee Details</Modal.Title>\r\n                    </Modal.Header>\r\n                    \r\n                    <Modal.Body>\r\n                            <ConfirmEmployeeDetailsModal employee = {this.generateEmployeeObject()} />\r\n                    </Modal.Body>\r\n\r\n                    <Modal.Footer>\r\n\r\n                        <button className=\"btn btn-danger\" onClick={this.closeComfirmModal} >Cancel</button>\r\n                        <button className=\"btn btn-success\"  onClick={this.onSubmit} >Confirm</button>\r\n                        \r\n                    </Modal.Footer>\r\n\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nAddEmployee.propTypes = {\r\n    errors: PropTypes.object.isRequired,\r\n    postEmployee: PropTypes.func.isRequired,\r\n    companyCode: PropTypes.string.isRequired,\r\n    resetErrorAction:PropTypes.func.isRequired\r\n}\r\n\r\nconst mapPropToState = (state) => ({\r\n    errors: state.errors,\r\n    companyCode: state.security.companySecurityInfo.companyCode\r\n});\r\n\r\nexport default connect(mapPropToState, { postEmployee , resetErrorAction })(AddEmployee);","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport classnames from 'classnames';\r\nimport { postEmployee, getEmployeeByEmployeeCode } from '../../actions/employeeActions';\r\nimport { Modal } from 'react-bootstrap';\r\nimport ConfirmEmployeeDetailsModal from './ConfirmEmployeeDetailsModal';\r\n\r\nclass UpdateEmployee extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            id: '',\r\n            firstName: '',\r\n            middleName: '',\r\n            lastName: '',\r\n            gender: '',\r\n            dateOfBirth: '',\r\n            mobile: '',\r\n            email: '',\r\n            area: '',\r\n            address: '',\r\n            city: '',\r\n            pinCode: '',\r\n            country: '',\r\n            employeeCode: '',\r\n            created_at: '',\r\n            errors: {}\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getEmployeeByEmployeeCode(this.props.match.params.employeecode);\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n\r\n        if (nextProps.employee) {\r\n            const {\r\n                id,\r\n                firstName,\r\n                middleName,\r\n                lastName,\r\n                gender,\r\n                dateOfBirth,\r\n                mobile,\r\n                email,\r\n                area,\r\n                address,\r\n                city,\r\n                pinCode,\r\n                country,\r\n                employeeCode,\r\n                created_at,\r\n            } = nextProps.employee;\r\n\r\n            this.setState({\r\n                id,\r\n                firstName,\r\n                middleName,\r\n                lastName,\r\n                gender,\r\n                dateOfBirth,\r\n                mobile,\r\n                email,\r\n                area,\r\n                address,\r\n                city,\r\n                pinCode,\r\n                country,\r\n                employeeCode,\r\n                created_at,\r\n                confirmModalShow : false\r\n            });\r\n        }\r\n\r\n        if (nextProps.errors) {\r\n            this.setState({ errors: nextProps.errors });\r\n        }\r\n\r\n    }\r\n\r\n    onChange = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    }\r\n\r\n    generateEmployeeObject() {\r\n\r\n        const employee = {\r\n            id: this.state.id,\r\n            firstName: this.state.firstName,\r\n            middleName: this.state.middleName,\r\n            lastName: this.state.lastName,\r\n            gender: this.state.gender,\r\n            dateOfBirth: this.state.dateOfBirth,\r\n            mobile: this.state.mobile,\r\n            email: this.state.email,\r\n            area: this.state.area,\r\n            address: this.state.address,\r\n            city: this.state.city,\r\n            country: this.state.country,\r\n            pinCode: this.state.pinCode,\r\n            employeeCode: this.state.employeeCode,\r\n            companyCode: this.props.companyCode//adding companycode from props\r\n        };\r\n         return employee;\r\n    }\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        const employee = this.generateEmployeeObject();\r\n        console.log(employee);\r\n        this.props.postEmployee(employee, this.props.history);\r\n    }\r\n\r\n    openComfirmModal = (e) => {\r\n        e.preventDefault();\r\n        this.setState({confirmModalShow:true})\r\n    }\r\n\r\n    closeComfirmModal = () => {\r\n        this.setState({confirmModalShow:false})\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const { errors } = this.state;\r\n\r\n        return (\r\n            <div className=\"container mt-3\">\r\n                <h4 className=\"display-4 text-primary text-center\">Update Employee</h4>\r\n                <hr />\r\n                <div className=\"row\">\r\n                    <div className=\"col\">\r\n                        <form onSubmit={this.openComfirmModal.bind(this)}>\r\n                            <div className=\"form-row\">\r\n                                <div className=\"form-group col-md-4\">\r\n                                    <label htmlFor=\"firstName\">First Name *</label>\r\n                                    <input type=\"text\"\r\n                                        className={classnames(\"form-control\", { \"is-invalid\": errors.firstName })}\r\n                                        placeholder=\"First Name\"\r\n                                        name=\"firstName\"\r\n                                        value={this.state.firstName}\r\n                                        onChange={this.onChange}\r\n                                        disabled\r\n                                    />\r\n                                    {\r\n                                        errors.firstName && (\r\n                                            <div className=\"invalid-feedback\">{errors.firstName}</div>\r\n                                        )\r\n                                    }\r\n                                </div>\r\n                                <div className=\"form-group col-md-4\">\r\n                                    <label htmlFor=\"middlename\">Middle Name</label>\r\n                                    <input type=\"text\"\r\n                                        className={classnames(\"form-control\", { \"is-invalid\": errors.middleName })}\r\n                                        placeholder=\"Middle Name\"\r\n                                        name=\"middleName\"\r\n                                        value={this.state.middleName}\r\n                                        onChange={this.onChange}\r\n                                    />\r\n                                    {\r\n                                        errors.middleName && (\r\n                                            <div className=\"invalid-feedback\">{errors.middleName}</div>\r\n                                        )\r\n                                    }\r\n                                </div>\r\n                                <div className=\"form-group col-md-4\">\r\n                                    <label htmlFor=\"lastName\">Last Name *</label>\r\n                                    <input type=\"text\"\r\n                                        className={classnames(\"form-control\", { \"is-invalid\": errors.lastName })}\r\n                                        placeholder=\"Last Name\"\r\n                                        name=\"lastName\"\r\n                                        value={this.state.lastName}\r\n                                        onChange={this.onChange}\r\n                                    />\r\n                                    {\r\n                                        errors.lastName && (\r\n                                            <div className=\"invalid-feedback\">{errors.lastName}</div>\r\n                                        )\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-row\">\r\n                                <div className=\"form-group col-md-6\">\r\n                                    <label htmlFor=\"dob\">Date of Birth</label>\r\n                                    <input type=\"date\"\r\n                                        className={classnames(\"form-control\", { \"is-invalid\": errors.dateOfBirth })}\r\n                                        placeholder=\"Date of Birth\"\r\n                                        name=\"dateOfBirth\"\r\n                                        value={this.state.dateOfBirth}\r\n                                        onChange={this.onChange}\r\n                                    />\r\n                                    {\r\n                                        errors.dateOfBirth && (\r\n                                            <div className=\"invalid-feedback\">{errors.dateOfBirth}</div>\r\n                                        )\r\n                                    }\r\n                                </div>\r\n                                <div className=\"form-group col-md-6 mt-4 pt-3\">\r\n                                    <label htmlFor=\"gender\" className=\"mr-3\">Gender * </label>\r\n                                    <div className=\"form-check form-check-inline\">\r\n                                        <input className=\"form-check-input\" type=\"radio\" name=\"gender\" id=\"male\" value=\"male\"\r\n                                            checked={this.state.gender === 'male'}\r\n                                            onChange={this.onChange}\r\n                                        />\r\n                                        <label className=\"form-check-label\">Male</label>\r\n                                    </div>\r\n                                    <div className=\"form-check form-check-inline mr-5\">\r\n                                        <input className=\"form-check-input\" type=\"radio\" name=\"gender\" id=\"female\" value=\"female\"\r\n                                            checked={this.state.gender === 'female'}\r\n                                            onChange={this.onChange}\r\n                                        />\r\n                                        <label className=\"form-check-label\">Female</label>\r\n                                    </div>\r\n                                    {\r\n                                        errors.gender && (\r\n                                            <div className=\"invalid-feedback\">{errors.gender}</div>\r\n                                        )\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-row\">\r\n                                <div className=\"form-group col-md-6\">\r\n                                    <label htmlFor=\"mobile\">Mobile *</label>\r\n                                    <input type=\"number\"\r\n                                        className={classnames(\"form-control\", { \"is-invalid\": errors.mobile })}\r\n                                        placeholder=\"Mobile\" maxLength=\"10\"\r\n                                        name=\"mobile\"\r\n                                        value={this.state.mobile}\r\n                                        onChange={this.onChange}\r\n                                    />\r\n                                    {\r\n                                        errors.mobile && (\r\n                                            <div className=\"invalid-feedback\">{errors.mobile}</div>\r\n                                        )\r\n                                    }\r\n                                </div>\r\n                                <div className=\"form-group col-md-6\">\r\n                                    <label htmlFor=\"email\">Email *</label>\r\n                                    <input type=\"text\"\r\n                                        className={classnames(\"form-control\", { \"is-invalid\": errors.email })}\r\n                                        placeholder=\"Email\"\r\n                                        name=\"email\"\r\n                                        value={this.state.email}\r\n                                        onChange={this.onChange}\r\n                                    />\r\n                                    {\r\n                                        errors.email && (\r\n                                            <div className=\"invalid-feedback\">{errors.email}</div>\r\n                                        )\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-row\">\r\n                                <div className=\"form-group col-md-4\">\r\n                                    <label htmlFor=\"address\">Address *</label>\r\n                                    <textarea type=\"text\"\r\n                                        className={classnames(\"form-control\", { \"is-invalid\": errors.address })}\r\n                                        placeholder=\"Address\"\r\n                                        name=\"address\"\r\n                                        value={this.state.address}\r\n                                        onChange={this.onChange}\r\n                                    ></textarea>\r\n                                    {\r\n                                        errors.email && (\r\n                                            <div className=\"invalid-feedback\">{errors.address}</div>\r\n                                        )\r\n                                    }\r\n                                </div>\r\n                                <div className=\"form-group col-md-4\">\r\n                                    <label htmlFor=\"area\">Area *</label>\r\n                                    <input type=\"text\"\r\n                                        className={classnames(\"form-control\", { \"is-invalid\": errors.area })}\r\n                                        placeholder=\"Area\"\r\n                                        name=\"area\"\r\n                                        value={this.state.area}\r\n                                        onChange={this.onChange}\r\n                                    />\r\n                                    {\r\n                                        errors.area && (\r\n                                            <div className=\"invalid-feedback\">{errors.area}</div>\r\n                                        )\r\n                                    }\r\n                                </div>\r\n                                <div className=\"form-group col-md-4\">\r\n                                    <label htmlFor=\"city\">City *</label>\r\n                                    <input type=\"text\"\r\n                                        className={classnames(\"form-control\", { \"is-invalid\": errors.city })}\r\n                                        placeholder=\"City\"\r\n                                        name=\"city\"\r\n                                        value={this.state.city}\r\n                                        onChange={this.onChange}\r\n                                    />\r\n                                    {\r\n                                        errors.city && (\r\n                                            <div className=\"invalid-feedback\">{errors.city}</div>\r\n                                        )\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-row\">\r\n                                <div className=\"form-group col-md-4\">\r\n                                    <label htmlFor=\"country\">Country *</label>\r\n                                    <input type=\"text\"\r\n                                        className={classnames(\"form-control\", { \"is-invalid\": errors.country })}\r\n                                        placeholder=\"Country\"\r\n                                        name=\"country\"\r\n                                        value={this.state.country}\r\n                                        onChange={this.onChange}\r\n                                    />\r\n                                    {\r\n                                        errors.country && (\r\n                                            <div className=\"invalid-feedback\">{errors.country}</div>\r\n                                        )\r\n                                    }\r\n                                </div>\r\n                                <div className=\"form-group col-md-4\">\r\n                                    <label htmlFor=\"pinCode\">Pincode *</label>\r\n                                    <input type=\"text\"\r\n                                        className={classnames(\"form-control\", { \"is-invalid\": errors.pinCode })}\r\n                                        placeholder=\"Pincode\"\r\n                                        name=\"pinCode\"\r\n                                        value={this.state.pinCode}\r\n                                        onChange={this.onChange}\r\n                                    />\r\n                                    {\r\n                                        errors.pinCode && (\r\n                                            <div className=\"invalid-feedback\">{errors.pinCode}</div>\r\n                                        )\r\n                                    }\r\n                                </div>\r\n                                <div className=\"form-group col-md-4 text-center\">\r\n                                    <input type=\"submit\" value=\"Submit\" className=\"btn btn-primary mt-4 mb-3\" />\r\n                                </div>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n                <Modal show={this.state.confirmModalShow} \r\n                       onHide={this.closeComfirmModal} \r\n                       size=\"lg\"\r\n                       backdrop=\"static\"\r\n                       keyboard={false}\r\n                       centered \r\n                >\r\n\r\n                    <Modal.Header closeButton>\r\n                         <Modal.Title>Confirm Employee Details</Modal.Title>\r\n                    </Modal.Header>\r\n                    \r\n                    <Modal.Body>\r\n                            <ConfirmEmployeeDetailsModal employee = {this.generateEmployeeObject()} />\r\n                    </Modal.Body>\r\n\r\n                    <Modal.Footer>\r\n                        <button className=\"btn btn-danger\" onClick={this.closeComfirmModal} >Cancel</button>\r\n                       \r\n                        <button className=\"btn btn-success\" \r\n                                onClick={this.onSubmit}\r\n                         >Confirm</button>\r\n                        \r\n\r\n                    </Modal.Footer>\r\n\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nUpdateEmployee.propTypes = {\r\n    errors: PropTypes.object.isRequired,\r\n    postEmployee: PropTypes.func.isRequired,\r\n    getEmployeeByEmployeeCode: PropTypes.func.isRequired,\r\n    companyCode: PropTypes.string.isRequired\r\n}\r\n\r\nconst mapPropToState = (state) => ({\r\n    errors: state.errors,\r\n    employee: state.employee.employee,\r\n    companyCode: state.security.companySecurityInfo.companyCode\r\n});\r\n\r\nexport default connect(mapPropToState, { postEmployee, getEmployeeByEmployeeCode })(UpdateEmployee);\r\n","import axios from 'axios';\r\nimport { GET_COMPANY_SERVICE_BY_COMPANY_CODE, GET_ERRORS } from './types';\r\n\r\n\r\nexport const addCompanyService = (companyService, history) => async dispatch => {\r\n\r\n    try {\r\n        await axios.post(\"/api/company/company-service\", companyService)\r\n        history.push(\"/\");\r\n        dispatch({\r\n            type: GET_ERRORS,\r\n            payload: {}\r\n        });\r\n    } catch (err) {\r\n        dispatch({\r\n            type: GET_ERRORS,\r\n            payload: err.response.data\r\n        });\r\n    }\r\n}\r\n\r\nexport const getServiceByCompanyCode = (companyCode) => async dispatch => {\r\n\r\n    try {\r\n        const res = await axios.get(`/api/company/company-service/${companyCode}`);\r\n        dispatch({\r\n            type: GET_COMPANY_SERVICE_BY_COMPANY_CODE,\r\n            payload: res.data\r\n        });\r\n    } catch (err) {\r\n        dispatch({\r\n            type: GET_ERRORS,\r\n            payload: err.response.data\r\n        });\r\n    }\r\n\r\n}","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { getAllServices } from '../../actions/serviceActions';\r\nimport { addCompanyService, getServiceByCompanyCode } from '../../actions/companyServiceActions';\r\n\r\n\r\nclass AddService extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            companyService: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getAllServices();\r\n        this.props.getServiceByCompanyCode(this.props.companyCode);\r\n    }\r\n    componentWillReceiveProps(nextProps) {\r\n        if (nextProps.companyService) {\r\n            this.setState({ companyService: nextProps.companyService });\r\n        }\r\n    }\r\n\r\n    onhandleChange = (e) => {\r\n\r\n        const services = this.props.service.services;\r\n\r\n        const serviceCode = e.target.value;\r\n        const checkedStatus = e.target.checked;\r\n\r\n        if (checkedStatus) {\r\n            const checked_service = services.filter(service_item => service_item.serviceCode === serviceCode);\r\n            this.setState({ companyService: this.state.companyService.concat(checked_service) });\r\n        } else {\r\n            const checked_service = this.state.companyService.filter(\r\n                service_item => service_item.serviceCode !== serviceCode);\r\n            this.setState({ companyService: checked_service });\r\n        }\r\n    }\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        const { companyService } = this.state;\r\n        let serviceCode = [];\r\n        let companyServiceReq\r\n        for (let i = 0; i < companyService.length; i++) {\r\n            serviceCode.push(companyService[i].serviceCode);\r\n        }\r\n        companyServiceReq = {\r\n            companyCode: this.props.companyCode,\r\n            serviceCodes: serviceCode\r\n        }\r\n\r\n        this.props.addCompanyService(companyServiceReq, this.props.history);\r\n\r\n    }\r\n\r\n    isServiceChecked = (serviceCode) => {\r\n        return this.state.companyService.some(service => service.serviceCode === serviceCode);\r\n    }\r\n\r\n    render() {\r\n\r\n        const { services } = this.props.service;\r\n\r\n        const { companyService } = this.state;\r\n\r\n        const selected_service_section_Algorithm = (companyService) => {\r\n            if (companyService.length === 0) {\r\n                return (\r\n                    <div className=\"alert alert-info text-center mt-5\" role=\"alert\">\r\n                        Check services to add on board\r\n                    </div>\r\n                );\r\n            } else {\r\n                return (\r\n                    <div className=\"mx-5 my-3\">\r\n                        {\r\n                            companyService.map(service => {\r\n                                return (\r\n                                    <div className=\"input-group mb-1\" key={service.serviceCode}>\r\n                                        <div className=\"input-group-prepend\">\r\n                                            <div className=\"input-group-text\">\r\n                                                <input type=\"checkbox\" checked={true} readOnly />\r\n                                            </div>\r\n                                        </div>\r\n                                        <input type=\"text\" className=\"form-control\" value={service.serviceName} disabled />\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n\r\n        let selected_service_section = selected_service_section_Algorithm(companyService);\r\n\r\n\r\n        return (\r\n            <div className=\"container smooth-scroll list-unstyled mt-3\">\r\n                <div className=\"row\">\r\n                    <div className=\"col\">\r\n                        <h4 className=\"display-5 text-primary text-center\"><b>Add Service</b></h4>\r\n                        <hr />\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-sm border border-dark mr-2\">\r\n                        <div className=\"mx-5 my-3\">\r\n                            {\r\n                                services.map(service => {\r\n                                    return (\r\n                                        <div className=\"form-check mb-1\" key={service.serviceCode}>\r\n                                            <label className=\"form-check-lable\">\r\n                                                <input type=\"checkbox\" className=\"form-check-input\"\r\n                                                    value={service.serviceCode}\r\n                                                    checked={this.isServiceChecked(service.serviceCode)}\r\n                                                    onChange={this.onhandleChange} />\r\n                                                {service.serviceName}\r\n                                            </label>\r\n                                        </div>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </div>\r\n\r\n                    </div>\r\n                    <div className=\"col-sm border border-dark\">\r\n                        {selected_service_section}\r\n                    </div>\r\n                </div>\r\n                <div className=\"text-center my-3\">\r\n                    <button className=\"btn btn-success\" onClick={this.onSubmit.bind(this)} >Submit</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nAddService.propTypes = {\r\n    companyCode: PropTypes.string.isRequired,\r\n    service: PropTypes.object.isRequired,\r\n    companyService: PropTypes.object.isRequired,\r\n    getAllServices: PropTypes.func.isRequired,\r\n    getServiceByCompanyCode: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProp = state => ({\r\n    service: state.service,\r\n    companyService: state.companyService.companyService,\r\n    companyCode: state.security.companySecurityInfo.companyCode\r\n})\r\n\r\nexport default connect(mapStateToProp, {\r\n    getAllServices, addCompanyService\r\n    , getServiceByCompanyCode\r\n})(AddService);\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport classnames from 'classnames';\r\nimport { createService } from \"../../actions/serviceActions\";\r\n\r\nclass CreateService extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            serviceCode: '',\r\n            serviceName: '',\r\n            noOfEmpReq: '',\r\n            errors: {}\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if (nextProps.errors) {\r\n            this.setState({ errors: nextProps.errors });\r\n        }\r\n    }\r\n\r\n    onChange = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    }\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        const service = {\r\n            serviceCode: this.state.serviceCode,\r\n            serviceName: this.state.serviceName,\r\n            noOfEmpReq: this.state.noOfEmpReq\r\n        }\r\n        this.props.createService(service, this.props.history);\r\n    }\r\n\r\n    render() {\r\n        const { errors } = this.state;\r\n        return (\r\n            <div className=\"container mt-3\">\r\n                <h4 className=\"display-4 text-primary text-center\">Create Service</h4>\r\n                <hr />\r\n                <div className=\"row \">\r\n                    <div className=\"col-md-8 m-auto\">\r\n                        <form onSubmit={this.onSubmit.bind(this)}>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"servicecode\">Service Code</label>\r\n                                <input type=\"text\" className={classnames(\"form-control form-control-lg\", {\r\n                                    \"is-invalid\": errors.serviceCode\r\n                                })}\r\n                                    placeholder=\"service code\"\r\n                                    name=\"serviceCode\"\r\n                                    value={this.state.serviceCode}\r\n                                    onChange={this.onChange}\r\n                                />\r\n                                {\r\n                                    errors.serviceCode && (\r\n                                        <div className=\"invalid-feedback\">{errors.serviceCode}</div>\r\n                                    )\r\n                                }\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"servicename\">Service Name</label>\r\n                                <input type=\"text\" className={classnames(\"form-control form-control-lg\", {\r\n                                    \"is-invalid\": errors.serviceName\r\n                                })}\r\n                                    placeholder=\"service name\"\r\n                                    name=\"serviceName\"\r\n                                    value={this.state.serviceName}\r\n                                    onChange={this.onChange}\r\n                                />\r\n                                {\r\n                                    errors.serviceName && (\r\n                                        <div className=\"invalid-feedback\">{errors.serviceName}</div>\r\n                                    )\r\n                                }\r\n                            </div>\r\n                            <div className=\"form-row\">\r\n                                <div className=\"col\">\r\n                                    <div className=\"form-group\">\r\n                                        <label htmlFor=\"employeenumber\">No. of Employee </label>\r\n                                        <input type=\"number\" className=\"form-control form-control-lg\" placeholder=\"no. of emp\"\r\n                                            name=\"noOfEmpReq\"\r\n                                            value={this.state.noOfEmpReq}\r\n                                            onChange={this.onChange}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"col\">\r\n\r\n                                </div>\r\n                            </div>\r\n                            <input type=\"submit\" value=\"Submit\" className=\"btn btn-primary btn-block\" />\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nCreateService.propTypes = {\r\n    createService: PropTypes.func.isRequired,\r\n    errors: PropTypes.object.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    errors: state.errors\r\n});\r\n\r\nexport default connect(mapStateToProps, { createService })(CreateService);\r\n","import React, { Component } from 'react';\r\n\r\nclass EmployeeServiceCheckbox extends Component {\r\n    render() {\r\n        const { companyService } = this.props;\r\n        return (\r\n            <div className=\"wrapper-3-item\">\r\n                {\r\n                    companyService.map(service => {\r\n                        return (\r\n                            <div className=\"form-check\" key={service.serviceCode}>\r\n                                <label className=\"form-check-lable\">\r\n                                    <input type=\"checkbox\" className=\"form-check-input\"\r\n                                        value={service.serviceCode}\r\n                                        onChange={(e) => this.props.onServiceChecked(e, this.props.employeeCode)}\r\n                                        checked={this.props.isServiceChecked(this.props.employeeCode, service.serviceCode)}\r\n                                    />\r\n                                    {service.serviceName}\r\n                                </label>\r\n                            </div>\r\n                        );\r\n                    })\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default EmployeeServiceCheckbox;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { getAllCompanyEmployees } from '../../actions/employeeActions';\r\nimport { getCompanyEmployeeService, postEmployeeService } from '../../actions/employeeServiceAction';\r\nimport { getServiceByCompanyCode } from '../../actions/companyServiceActions';\r\nimport EmployeeServiceCheckbox from './EmployeeServiceCheckbox';\r\nimport hashmap from 'hashmap';\r\n\r\n\r\nclass MapServiceToEmployee extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            employees: [],\r\n            employeeService: [],\r\n            companyService: [],\r\n            hmEmployeeService: new hashmap()\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { companyCode } = this.props;\r\n        this.props.getAllCompanyEmployees(companyCode);\r\n        this.props.getCompanyEmployeeService();\r\n        this.props.getServiceByCompanyCode(companyCode);\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if (nextProps.employees) {\r\n            this.setState({ employees: nextProps.employees });\r\n        }\r\n        if (nextProps.companyService) {\r\n            this.setState({ companyService: nextProps.companyService });\r\n        }\r\n        if (nextProps.employeeService) {\r\n            const { employeeService } = nextProps;\r\n            if (employeeService.length > 0) {\r\n                var hmEmployeeService = new hashmap();\r\n                for (let i = 0; i < employeeService.length; i++) {\r\n                    hmEmployeeService.set(employeeService[i].employeeCode, employeeService[i].serviceCodes);\r\n                }\r\n                this.setState({ hmEmployeeService: hmEmployeeService });\r\n            }\r\n        }\r\n    }\r\n\r\n    onServiceChecked = (e, employeeCode) => {\r\n        const { hmEmployeeService } = this.state;\r\n        let serviceCode = e.target.value;\r\n        let checkedStatus = e.target.checked;\r\n        if (hmEmployeeService.has(employeeCode)) {\r\n            var arrServiceCode = [];\r\n            arrServiceCode = hmEmployeeService.get(employeeCode);\r\n            if (checkedStatus) {\r\n                arrServiceCode.push(serviceCode);\r\n                hmEmployeeService.set(employeeCode, arrServiceCode);\r\n            } else {\r\n                arrServiceCode = arrServiceCode.filter(item => item !== serviceCode);\r\n                hmEmployeeService.set(employeeCode, arrServiceCode);\r\n            }\r\n        } else {\r\n            if (checkedStatus) {\r\n                var arrServiceCode = [];\r\n                arrServiceCode.push(serviceCode);\r\n                hmEmployeeService.set(employeeCode, arrServiceCode);\r\n            } else {\r\n\r\n            }\r\n        }\r\n        this.setState({ hmEmployeeService: hmEmployeeService });\r\n    }\r\n\r\n\r\n    isServiceChecked = (employeeCode, serviceCode) => {\r\n\r\n        const { hmEmployeeService } = this.state;\r\n        if (hmEmployeeService.has(employeeCode)) {\r\n            return hmEmployeeService.get(employeeCode).some(item => item === serviceCode);\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        const { hmEmployeeService } = this.state;\r\n        let employeeServiceRequest = {};\r\n        let employeeServices = [];\r\n        for (let key of hmEmployeeService.keys()) {\r\n            var arrServiceCodes = [];\r\n            arrServiceCodes = hmEmployeeService.get(key);\r\n            if (arrServiceCodes.length !== 0) {\r\n                var employeeService = {\r\n                    employeeCode: key,\r\n                    serviceCodes: arrServiceCodes\r\n                };\r\n                employeeServices.push(employeeService);\r\n            }\r\n        }\r\n        employeeServiceRequest = {\r\n            employeeServices,\r\n            companyCode: this.props.companyCode\r\n        }\r\n        console.log(\"Final Object : \", employeeServiceRequest);\r\n        this.props.postEmployeeService(employeeServiceRequest, this.props.history);\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        const { employees, companyService } = this.state;\r\n\r\n        return (\r\n            <div className=\"container mt-3\">\r\n                <div className=\"row\">\r\n                    <div className=\"col\">\r\n                        <h4 className=\"display-5 text-primary text-center\"><b>Assign Service</b></h4>\r\n                        <hr />\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <table className=\"table table-bordered \">\r\n                        <thead>\r\n                            <tr className=\"text-center\" >\r\n                                <th scope=\"col\">Employee</th>\r\n                                <th scope=\"col-6\">Select service to assign</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {\r\n                                employees.map(employee => {\r\n                                    return (\r\n                                        <tr key={employee.employeeCode}>\r\n                                            <td className=\"text-center\">{employee.firstName + \" \" + employee.lastName}</td>\r\n                                            <td className=\"text-justify\" >\r\n                                                <EmployeeServiceCheckbox\r\n                                                    employeeCode={employee.employeeCode}\r\n                                                    companyService={companyService}\r\n                                                    onServiceChecked={this.onServiceChecked}\r\n                                                    isServiceChecked={this.isServiceChecked}\r\n                                                />\r\n\r\n                                            </td>\r\n                                        </tr>)\r\n                                })\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <div className=\"text-center my-3 \">\r\n                    <button className=\"btn btn-success\" onClick={this.onSubmit.bind(this)} >Submit</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nMapServiceToEmployee.propType = {\r\n    employees: PropTypes.array.isRequired,\r\n    getAllCompanyEmployees: PropTypes.func.isRequired,\r\n    getCompanyEmployeeService: PropTypes.func.isRequired,\r\n    company_selected_service: PropTypes.array.isRequired,\r\n    postEmployeeService: PropTypes.func.isRequired,\r\n    companyCode: PropTypes.string.isRequired\r\n}\r\n\r\nconst mapStateToProp = state => ({\r\n    employees: state.employee.employees,\r\n    employeeService: state.employeeService.employeeService,\r\n    companyService: state.companyService.companyService,\r\n    companyCode: state.security.companySecurityInfo.companyCode\r\n})\r\n\r\nexport default connect(mapStateToProp, {\r\n    getAllCompanyEmployees, getCompanyEmployeeService,\r\n    getServiceByCompanyCode, postEmployeeService\r\n})(MapServiceToEmployee);\r\n","import axios from 'axios';\r\nimport { GET_COMPANY_EMPLOYEE_SERVICE, GET_ERRORS } from './types';\r\n\r\nexport const postEmployeeService = (employeeServiceRequest, history) => async dispatch => {\r\n\r\n    try {\r\n        console.log(\"FInal Object : \", JSON.stringify(employeeServiceRequest));\r\n\r\n        await axios.post(\"/api/company/employeeservice\", employeeServiceRequest);\r\n        dispatch({\r\n            type: GET_COMPANY_EMPLOYEE_SERVICE,\r\n            payload: []\r\n        });\r\n        history.push(\"/employeelist\");\r\n        dispatch({\r\n            type: GET_ERRORS,\r\n            payload: {}\r\n        });\r\n    } catch (err) {\r\n        dispatch({\r\n            action: GET_ERRORS,\r\n            payload: err.response.data\r\n        });\r\n    }\r\n\r\n}\r\n\r\nexport const getCompanyEmployeeService = () => async dispatch => {\r\n\r\n    try {\r\n        const res = await axios.get(\"/api/company/employeeservice\");\r\n        dispatch({\r\n            type: GET_COMPANY_EMPLOYEE_SERVICE,\r\n            payload: res.data\r\n        });\r\n    } catch (err) {\r\n        dispatch({\r\n            type: GET_ERRORS,\r\n            payload: err.response.data\r\n        });\r\n    }\r\n}\r\n","import axios from \"axios\";\r\nimport { GET_ERRORS, GET_ALL_ASSETS_BY_COMPANY_CODE, DELETE_ASSET_BY_ASSET_CODE, GET_ASSET_BY_ASSET_CODE } from \"./types\";\r\n\r\nexport const postAsset = (asset, history) => async dispatch => {\r\n\r\n    try {\r\n\r\n        await axios.post(\"/api/company/asset\", asset);\r\n        history.push(\"/assetlist\");\r\n        dispatch({\r\n            type: GET_ERRORS,\r\n            payload: {}\r\n        });\r\n\r\n    } catch (err) {\r\n        dispatch({\r\n            type: GET_ERRORS,\r\n            payload: err.response.data\r\n        });\r\n    }\r\n\r\n}\r\n\r\nexport const getAllCompanyAssets = (companyCode) => async dispatch => {\r\n    try {\r\n        const res = await axios.get(`/api/company/asset/companyasset/${companyCode}`);\r\n        dispatch({\r\n            type: GET_ALL_ASSETS_BY_COMPANY_CODE,\r\n            payload: res.data\r\n        });\r\n    } catch (err) {\r\n        dispatch({\r\n            type: GET_ERRORS,\r\n            payload: err.response.data\r\n        });\r\n    }\r\n}\r\n\r\nexport const deleteAssetByCode = (code) => async dispatch => {\r\n    try {\r\n\r\n        if (window.confirm(\"Are you sure you want to delete this asset\")) {\r\n            await axios.delete(`/api/company/asset/${code}`);\r\n            dispatch({\r\n                type: DELETE_ASSET_BY_ASSET_CODE,\r\n                payload: code\r\n            });\r\n        }\r\n\r\n    } catch (err) {\r\n        dispatch({\r\n            type: GET_ERRORS,\r\n            payload: err.response.data\r\n        });\r\n    }\r\n}\r\n\r\nexport const getAssetByAssetCode = (code) => async dispatch => {\r\n\r\n    try {\r\n\r\n        const res = await axios.get(`/api/company/asset/${code}`);\r\n        dispatch({\r\n            type: GET_ASSET_BY_ASSET_CODE,\r\n            payload: res.data\r\n        });\r\n\r\n    } catch (err) {\r\n        dispatch({\r\n            type: GET_ERRORS,\r\n            payload: err.response.data\r\n        });\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { postAsset } from \"../../actions/assetActions\";\r\nimport classnames from 'classnames';\r\n\r\nclass CreateAsset extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            code: '',\r\n            name: '',\r\n            quantity: '',\r\n            errors: {}\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if (nextProps.errors) {\r\n            this.setState({ errors: nextProps.errors });\r\n        }\r\n    }\r\n\r\n    onChange = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    }\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        const asset = {\r\n            code: this.state.code,\r\n            name: this.state.name,\r\n            quantity: this.state.quantity,\r\n            companyCode: this.props.companyCode\r\n        };\r\n        this.props.postAsset(asset, this.props.history);\r\n    }\r\n\r\n    render() {\r\n\r\n        const { errors } = this.state;\r\n\r\n        return (\r\n            <div className=\"container mt-3\">\r\n                <h4 className=\"display-4 text-center text-primary\">Create Asset</h4>\r\n                <hr />\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-8 m-auto\">\r\n                        <form onSubmit={this.onSubmit.bind(this)}>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"code\">Asset Code</label>\r\n                                <input type=\"text\" className={classnames(\"form-control form-control-lg\",\r\n                                    { \"is-invalid\": errors.code }\r\n                                )}\r\n                                    placeholder=\"Asset Code\"\r\n                                    value={this.state.code}\r\n                                    name=\"code\"\r\n                                    onChange={this.onChange}\r\n                                />\r\n                                {\r\n                                    errors.code && (\r\n                                        <div className=\"invalid-feedback\">{errors.code}</div>\r\n                                    )\r\n                                }\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"name\">Asset Name</label>\r\n                                <input type=\"text\" className={classnames(\"form-control form-control-lg\",\r\n                                    { \"is-invalid\": errors.name })}\r\n                                    placeholder=\"Asset Name\"\r\n                                    value={this.state.name}\r\n                                    name=\"name\"\r\n                                    onChange={this.onChange}\r\n                                />\r\n                                {\r\n                                    errors.name && (\r\n                                        <div className=\"invalid-feedback\">{errors.name}</div>\r\n                                    )\r\n                                }\r\n                            </div>\r\n                            <div className=\"form-row\">\r\n                                <div className=\"col\">\r\n                                    <div className=\"form-group\">\r\n                                        <label htmlFor=\"quantity\">Quantity</label>\r\n                                        <input type=\"number\" className=\"form-control form-control-lg\"\r\n                                            placeholder=\"Quantity\"\r\n                                            value={this.state.quantity}\r\n                                            name=\"quantity\"\r\n                                            onChange={this.onChange}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"col\">\r\n\r\n                                </div>\r\n                            </div>\r\n                            <input type=\"submit\" className=\"btn btn-primary btn-block\" value=\"Submit\" />\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nCreateAsset.propType = {\r\n    postAsset: PropTypes.func.isRequired,\r\n    errors: PropTypes.object.isRequired,\r\n    companyCode: PropTypes.string.isRequired\r\n};\r\n\r\nconst mapStateToProp = state => ({\r\n    errors: state.errors,\r\n    companyCode: state.security.companySecurityInfo.companyCode\r\n});\r\n\r\n\r\nexport default connect(mapStateToProp, { postAsset })(CreateAsset);\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst AddAssetButton = (props) => {\r\n    return (\r\n        <React.Fragment>\r\n            <Link className=\"btn btn-primary\" to=\"/createasset\">Add Asset</Link>\r\n        </React.Fragment>\r\n    );\r\n}\r\nexport default AddAssetButton;\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { deleteAssetByCode } from '../../actions/assetActions';\r\n\r\nclass AssetItem extends Component {\r\n\r\n\r\n    onClick = (code) => {\r\n        this.props.history.push(`/updateasset/${code}`);\r\n    }\r\n    onDelete = (code) => {\r\n        this.props.deleteAssetByCode(code);\r\n    }\r\n\r\n    render() {\r\n\r\n        const { asset } = this.props;\r\n\r\n        return (\r\n            <div className=\"container mb-3\"  >\r\n                <div className=\"card\">\r\n                    <div className=\"card-header asset-card-header text-white\">\r\n                        {asset.name + \"-\" + asset.code}\r\n\r\n                    </div>\r\n                    <div className=\"card-body asset-card-body\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col\">\r\n                                <h6 className=\"card-title\">{\"Qty:\" + asset.quantity}</h6>\r\n                            </div>\r\n                            <div className=\"col\">\r\n                                <i className=\"fa fa-pencil-square-o\" aria-hidden=\"true\"\r\n                                    onClick={this.onClick.bind(this, asset.code)}></i>\r\n                                <i className=\"fa fa-trash ml-3\" onClick={this.onDelete.bind(this, asset.code)} ></i>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nAssetItem.propType = {\r\n    deleteAssetByCode: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProp = state => ({\r\n\r\n})\r\n\r\nexport default connect(mapStateToProp, { deleteAssetByCode })(AssetItem);\r\n","import React, { Component } from 'react'\r\nimport AddAssetButton from '../custombuttons/AddAssetButton';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { getAllCompanyAssets } from '../../actions/assetActions';\r\nimport AssetItem from './AssetItem';\r\n\r\nclass AssetList extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.getAllCompanyAssets(this.props.companyCode);\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const { assets } = this.props.asset\r\n\r\n        return (\r\n            <div className=\"container mt-3\">\r\n                <div className=\"row\">\r\n                    <div className=\"col\">\r\n                        <AddAssetButton />\r\n                    </div>\r\n                </div>\r\n                <div className=\"wrapper-5-item my-4\">\r\n                    {\r\n                        assets.map(asset => {\r\n                            return (<AssetItem\r\n                                key={asset.id}\r\n                                asset={asset}\r\n                                history={this.props.history}\r\n                            />)\r\n                        })\r\n                    }\r\n                </div>\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nAssetList.propType = {\r\n    asset: PropTypes.object.isRequired,\r\n    getAllCompanyAssets: PropTypes.func.isRequired,\r\n    companyCode: PropTypes.string.isRequired\r\n\r\n}\r\n\r\nconst mapStateToProp = state => ({\r\n    asset: state.asset,\r\n    companyCode: state.security.companySecurityInfo.companyCode\r\n});\r\n\r\n\r\nexport default connect(mapStateToProp, { getAllCompanyAssets })(AssetList);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { getAssetByAssetCode, postAsset } from '../../actions/assetActions';\r\nimport classnames from 'classnames';\r\n\r\n\r\n\r\nclass UpdateAsset extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            id: '',\r\n            code: '',\r\n            name: '',\r\n            quantity: '',\r\n            companyCode: '',\r\n            errors: {}\r\n        }\r\n    }\r\n\r\n    onChange = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    }\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        const asset = {\r\n            id: this.state.id,\r\n            code: this.state.code,\r\n            companyCode: this.state.companyCode,\r\n            name: this.state.name,\r\n            quantity: this.state.quantity\r\n        }\r\n\r\n        this.props.postAsset(asset, this.props.history)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getAssetByAssetCode(this.props.match.params.assetcode);\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n\r\n        if (nextProps.errors) {\r\n            this.setState({ errors: nextProps.errors });\r\n        }\r\n\r\n        const { id, code, name, companyCode, quantity } = nextProps.asset;\r\n        this.setState({\r\n            id,\r\n            code,\r\n            name,\r\n            companyCode,\r\n            quantity\r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n        const { errors } = this.state;\r\n        return (\r\n            <div className=\"container mt-3\">\r\n                <h4 className=\"display-4 text-center text-primary\">Update Asset</h4>\r\n                <hr />\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-8 m-auto\">\r\n                        <form onSubmit={this.onSubmit.bind(this)}>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"code\">Asset Code</label>\r\n                                <input type=\"text\" className=\"form-control form-control-lg\"\r\n                                    name=\"code\"\r\n                                    value={this.state.code}\r\n                                    onChange={this.onChange}\r\n                                    disabled />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"name\">Asset Name</label>\r\n                                <input type=\"text\" className={classnames(\"form-control form-control-lg\",\r\n                                    { \"is-invalid\": errors.name })}\r\n                                    name=\"name\"\r\n                                    value={this.state.name}\r\n                                    onChange={this.onChange}\r\n                                />\r\n                                {\r\n                                    errors.name && (\r\n                                        <div className=\"invalid-feedback\">{errors.name}</div>\r\n                                    )\r\n                                }\r\n                            </div>\r\n                            <div className=\"form-row\">\r\n                                <div className=\"col\">\r\n                                    <div className=\"form-group\">\r\n                                        <label htmlFor=\"quantity\">Asset Quantity</label>\r\n                                        <input type=\"number\" className=\"form-control form-control-lg\"\r\n                                            name=\"quantity\"\r\n                                            value={this.state.quantity}\r\n                                            onChange={this.onChange}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"col\">\r\n\r\n                                </div>\r\n                            </div>\r\n                            <input type=\"submit\" value=\"Submit\" className=\"btn btn-primary btn-block\" />\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nUpdateAsset.propType = {\r\n    getAssetByAssetCode: PropTypes.func.isRequired,\r\n    postAsset: PropTypes.func.isRequired,\r\n    asset: PropTypes.object.isRequired,\r\n    errors: PropTypes.object.isRequired\r\n}\r\n\r\nconst mapStateToProp = state => ({\r\n    asset: state.asset.asset,\r\n    errors: state.errors\r\n})\r\n\r\n\r\nexport default connect(mapStateToProp, { postAsset, getAssetByAssetCode })(UpdateAsset);\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Landing extends Component {\r\n\r\n    componentDidMount() {\r\n        if (this.props.security.validToken) {\r\n            this.props.history.push(\"/dashboard\");\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"login-bg\">\r\n                <div className=\"container text-center pt-5\">\r\n                    <div className=\"border rounded-lg border-warning p-5\">\r\n                        <Link className=\"btn btn-lg btn-danger mr-2\" to=\"/registercompany\">Sign Up</Link>\r\n                        <Link className=\"btn btn-lg btn-danger mr-2\" to=\"/login\">Login</Link><br />\r\n                        <i className=\"justify-content font-weight-bold\">\r\n                            Register your company & gets our service\r\n                        </i>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nLanding.propTypes = {\r\n    security: PropTypes.object.isRequired\r\n}\r\n\r\nconst mapStateToProp = state => ({\r\n    security: state.security\r\n})\r\n\r\n\r\nexport default connect(mapStateToProp)(Landing);\r\n","import React, { Component } from 'react';\r\nimport { createNewCompany } from '../../actions/securityActions';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport classnames from 'classnames';\r\n\r\nclass RegisterCompany extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            companyName: '',\r\n            companyCode: '',\r\n            address: '',\r\n            email: '',\r\n            errors: ''\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.security.validToken) {\r\n            this.props.history.push(\"/dashboard\");\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n\r\n        if (nextProps.errors) {\r\n            this.setState({ errors: nextProps.errors })\r\n        }\r\n    }\r\n\r\n    onChange = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    }\r\n\r\n    onSubmite = (e) => {\r\n        e.preventDefault();\r\n        const newCompany = {\r\n            companyName: this.state.companyName,\r\n            companyCode: this.state.companyCode,\r\n            address: this.state.address,\r\n            email: this.state.email\r\n        }\r\n        this.props.createNewCompany(newCompany, this.props.history);\r\n    }\r\n\r\n    render() {\r\n\r\n        const { errors } = this.state;\r\n\r\n        return (\r\n            <div className=\"container mt-3\">\r\n                <h4 className=\"display-4 text-primary text-center\">Register Company</h4>\r\n                <hr />\r\n                <div className=\"row\">\r\n                    <div className=\"col\">\r\n                        <form onSubmit={this.onSubmite.bind(this)}>\r\n                            <div className=\"form-row\">\r\n                                <div className=\"form-group col-md-6\">\r\n                                    <label htmlFor=\"companyName\">Company Name</label>\r\n                                    <input type=\"text\" className={classnames(\"form-control form-control-lg\",\r\n                                        { \"is-invalid\": errors.companyName }\r\n                                    )}\r\n                                        placeholder=\"Company Name\"\r\n                                        name=\"companyName\"\r\n                                        value={this.state.companyName}\r\n                                        onChange={this.onChange}\r\n                                    />\r\n                                    {\r\n                                        errors.companyName && (\r\n                                            <div className=\"invalid-feedback\">{errors.companyName}</div>\r\n                                        )\r\n                                    }\r\n                                </div>\r\n                                <div className=\"form-group col-md-6\">\r\n                                    <label htmlFor=\"email\">Email</label>\r\n                                    <input type=\"text\" className={classnames(\"form-control form-control-lg\",\r\n                                        { \"is-invalid\": errors.email }\r\n                                    )}\r\n                                        placeholder=\"Company Contact Email\"\r\n                                        name=\"email\"\r\n                                        value={this.state.email}\r\n                                        onChange={this.onChange}\r\n                                    />\r\n                                    {\r\n                                        errors.email && (\r\n                                            <div className=\"invalid-feedback\">{errors.email}</div>\r\n                                        )\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"companyCode\">Company Code</label>\r\n                                <input type=\"text\" className={classnames(\"form-control form-control-lg\",\r\n                                    { \"is-invalid\": errors.companyCode }\r\n                                )}\r\n                                    placeholder=\"Company Code\"\r\n                                    name=\"companyCode\"\r\n                                    value={this.state.companyCode}\r\n                                    onChange={this.onChange}\r\n                                />\r\n                                {\r\n                                    errors.companyCode && (\r\n                                        <div className=\"invalid-feedback\">{errors.companyCode}</div>\r\n                                    )\r\n                                }\r\n                            </div>\r\n\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"address\">Address</label>\r\n                                <textarea type=\"text\" className={classnames(\"form-control form-control-lg\",\r\n                                    { \"is-invalid\": errors.address }\r\n                                )}\r\n                                    placeholder=\"Address\"\r\n                                    name=\"address\"\r\n                                    value={this.state.address}\r\n                                    onChange={this.onChange}\r\n                                ></textarea>\r\n                                {\r\n                                    errors.address && (\r\n                                        <div className=\"invalid-feedback\">{errors.address}</div>\r\n                                    )\r\n                                }\r\n                            </div>\r\n                            <div className=\"text-center\">\r\n                                <input type=\"submit\" value=\"Register\" className=\"btn btn-primary\" />\r\n                            </div>\r\n\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nRegisterCompany.propTypes = {\r\n    createNewCompany: PropTypes.func.isRequired,\r\n    errors: PropTypes.object.isRequired,\r\n    security: PropTypes.object.isRequired\r\n}\r\n\r\nconst mapStateToProp = state => ({\r\n    errors: state.errors,\r\n    security: state.security\r\n})\r\n\r\nexport default connect(mapStateToProp, { createNewCompany })(RegisterCompany);\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport classnames from 'classnames';\r\nimport { loginCompany } from '../../actions/securityActions';\r\n\r\nclass Login extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username: '', //company code is user name\r\n            password: '',\r\n            errors: {}\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.security.validToken) {\r\n            this.props.history.push(\"/dashboard\");\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n\r\n        if (nextProps.security.validToken) {\r\n            this.props.history.push(\"/dashboard\");\r\n        }\r\n\r\n        if (nextProps.errors) {\r\n            this.setState({ errors: nextProps.errors })\r\n        }\r\n    }\r\n\r\n    onChange = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    }\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        const loginRequest = {\r\n            username: this.state.username,\r\n            password: this.state.password\r\n        }\r\n        this.props.loginCompany(loginRequest);\r\n    }\r\n\r\n    render() {\r\n\r\n        const { errors } = this.state;\r\n\r\n        return (\r\n            <div className=\"login-bg\">\r\n                <div className=\"container login-card\">\r\n                    <div className=\"card bg-info text-white\">\r\n                        <div className=\"card-body\">\r\n                            <form onSubmit={this.onSubmit.bind(this)}>\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"companycode\">Company Code</label>\r\n                                    <input type=\"text\" className={classnames(\"form-control form-control-lg\",\r\n                                        { \"is-invalid\": errors.username }\r\n                                    )}\r\n                                        placeholder=\"Company Code\"\r\n                                        name=\"username\"\r\n                                        onChange={this.onChange}\r\n                                    />\r\n                                    {\r\n                                        errors.username && (\r\n                                            <div className=\"invalid-feedback\">{errors.username}</div>\r\n                                        )\r\n                                    }\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"companycode\">Password</label>\r\n                                    <input type=\"password\" className={classnames(\"form-control form-control-lg\",\r\n                                        { \"is-invalid\": errors.password }\r\n                                    )}\r\n                                        placeholder=\"Password\"\r\n                                        name=\"password\"\r\n                                        onChange={this.onChange}\r\n                                    />\r\n                                    {\r\n                                        errors.password && (\r\n                                            <div className=\"invalid-feedback\">{errors.password}</div>\r\n                                        )\r\n                                    }\r\n                                </div>\r\n\r\n                                <div className=\"text-center\">\r\n                                    <input type=\"submit\" value=\"Login\" className=\"btn btn-outline-light btn-block\" />\r\n                                </div>\r\n                            </form>\r\n\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nLogin.propTypes = {\r\n    loginCompany: PropTypes.func.isRequired,\r\n    errors: PropTypes.object.isRequired,\r\n    security: PropTypes.object.isRequired\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    errors: state.errors,\r\n    security: state.security\r\n})\r\n\r\nexport default connect(mapStateToProps, { loginCompany })(Login);\r\n","import React, { Component } from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst SecuredRoute = ({ component: Component, security, ...otherProps }) => (\r\n\r\n    <Route {...otherProps}\r\n        render={props => security.validToken === true ?\r\n            (\r\n                <Component {...props} />\r\n            )\r\n            :\r\n            (\r\n                <Redirect to=\"/login\" />\r\n            )\r\n        } />\r\n)\r\n\r\nSecuredRoute.propTypes = {\r\n    security: PropTypes.object.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    security: state.security\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps)(SecuredRoute);\r\n","import React, { Component } from 'react';\r\nimport \"./ServiceRequestItem.css\";\r\n\r\nclass ServiceReqestItem extends Component {\r\n\r\n\r\n    onItemClick= (id) => {\r\n        this.props.openServiceReqDetailModal(id)\r\n    }\r\n\r\n    render() {\r\n\r\n        const {serviceRequest} = this.props;\r\n\r\n        return (\r\n           <div className=\"border border-primary rounded my-1 p-.5 \" onClick={this.onItemClick.bind(this,serviceRequest.id)}>\r\n                <p class=\"font-weight-bold \">{serviceRequest.serviceName} ({serviceRequest.serviceCode})</p>\r\n                <p class=\"font-weight-bold \"> at {serviceRequest.scheduleTime} </p> <hr className=\"divider\"/>\r\n                <p class=\"font-weight-bold \"> {serviceRequest.serviceReqCode} </p>\r\n           </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ServiceReqestItem;\r\n","import React, { Component } from 'react';\r\nimport Select from 'react-select'\r\nimport PropTypes from 'prop-types';\r\nimport {connect} from 'react-redux';\r\nimport {postAssignEmployeeRequest} from '../../actions/serviceRequestActions';\r\nimport { ASSIGNED_SERVICE_REQ, INPROGRESS_SERVICE_REQ, PENDING_SERVICE_REQ } from '../../constants/Constants';\r\nimport store from '../../store';\r\nimport { GET_ERRORS } from '../../actions/types';\r\n\r\nclass ServiceRequestDetailsModal extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            selectedEmployee:{},\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps){\r\n\r\n\r\n        if (nextProps.errors.assignedEmployeeCode) {\r\n           alert(\"Please select employee.\")\r\n           store.dispatch({\r\n            type: GET_ERRORS,\r\n            payload: {}\r\n          });\r\n        \r\n        }\r\n        \r\n        if(nextProps.availableEmployeeCode){\r\n            let arrAvailableEmployee= [];\r\n            const {availableEmployeeCode,arrAllEmployee} = nextProps;\r\n            arrAllEmployee.forEach(employee => {\r\n                if(availableEmployeeCode.includes(employee.employeeCode)){\r\n                    arrAvailableEmployee.push(employee);\r\n                }\r\n            });\r\n\r\n            this.setState({\r\n                arrAvailableEmployee\r\n            });\r\n        }\r\n    \r\n    }\r\n   \r\n    handleSelect = (selection) => {\r\n       this.setState({\r\n              selectedEmployee:selection\r\n       });\r\n    }  \r\n    \r\n    \r\n    onSubmit= (e) => {\r\n\r\n        const {serviceRequest} = this.props;\r\n        if(serviceRequest.statusCode===PENDING_SERVICE_REQ){\r\n            const assignEmployeeRequest =  {\r\n                serviceReqCode : serviceRequest.serviceReqCode,\r\n                assignedEmployeeCode:this.state.selectedEmployee.employeeCode\r\n            }\r\n            this.props.postAssignEmployeeRequest(assignEmployeeRequest);\r\n            this.props.closeServiceReqDetailModal(true);\r\n        }else{\r\n            this.props.closeServiceReqDetailModal(false);\r\n        }\r\n      \r\n    }\r\n\r\n\r\n    render() {\r\n        const {serviceRequest , availableEmployees} = this.props;\r\n        let assignEmployeeCol;\r\n        if(serviceRequest.statusCode===PENDING_SERVICE_REQ){\r\n            assignEmployeeCol= (\r\n                <Select\r\n                    name=\"Select Employee\"\r\n                    options={availableEmployees}\r\n                    getOptionLabel = {(employee)=>employee.firstName + employee.lastName}\r\n                    getOptionValue={(employee)=>employee.employeeCode}\r\n                    onChange = {(selection,action)=>this.handleSelect(selection)}\r\n                />\r\n            );\r\n        }else{\r\n            assignEmployeeCol = (\r\n                <div>\r\n                    <div className=\"font-weight-bold\">{serviceRequest.assignedEmployeeName} ({serviceRequest.assignedEmployeeCode}) </div>\r\n                    <div className=\"font-weight-bold\"> Ph: {serviceRequest.assignedEmployeeMobile}</div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n\r\n            return (\r\n                <div className=\"card\">\r\n                <div className=\"card-body boder-danger\">\r\n    \r\n                    <h5 className=\"card-title d-inline\">User : {serviceRequest.mobileUserName}</h5>\r\n                    <h5 className=\"card-title d-inline ml-5\">Code : {serviceRequest.mobileUserCode}</h5>\r\n\r\n\r\n                    <table className=\"table table-bordered mt-2\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th scope=\"col\">Service Name</th>\r\n                                <th scope=\"col\">Date</th>\r\n                                <th scope=\"col\">Time</th>\r\n                                <th scope=\"col\">Assigne Employee</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td>{serviceRequest.serviceName}</td>\r\n                                {serviceRequest.scheduleDate && (\r\n                                    <td>{ serviceRequest.scheduleDate}</td>\r\n                                )}\r\n                                {serviceRequest.scheduleTime && (\r\n                                    <td>{serviceRequest.scheduleTime } hrs</td>\r\n                                )}\r\n                                <td>\r\n                                    {assignEmployeeCol}\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                 </div>\r\n                 <div className=\"card-footer\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-6 text-center\">\r\n                            <button className=\"btn btn-success btn-md center-block\" style={{width:100}} \r\n                               onClick={this.onSubmit.bind(this)} >OK</button>\r\n                            <button className=\"btn btn-danger btn-md center-block ml-5\" style={{width:100}}\r\n                                onClick = {this.props.closeServiceReqDetailModal.bind(this,false)}\r\n                            >Cancel</button>\r\n                        </div>\r\n                    </div>\r\n                       \r\n                </div>\r\n                </div>\r\n            )\r\n      \r\n    }\r\n}\r\n\r\nServiceRequestDetailsModal.propTypes = {\r\n    postAssignEmployeeRequest:PropTypes.func.isRequired,\r\n    errors: PropTypes.object.isRequired\r\n}\r\n\r\n function mapStateToProp(state) {\r\n     return {\r\n        errors: state.errors\r\n     }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProp,{postAssignEmployeeRequest})(ServiceRequestDetailsModal);\r\n","\r\nexport const PENDING_SERVICE_REQ=100\r\nexport const ASSIGNED_SERVICE_REQ=101\r\nexport const INPROGRESS_SERVICE_REQ=102\r\nexport const COMPLETED_SERVICE_REQ=103\r\nexport const CANCELED_SERVICE_REQ=104\r\n\r\n\r\nexport const Start_TIME = \"08:00\";\r\nexport const End_TIME = \"18:00\";\r\n","import axios from 'axios';\r\nimport {GET_ALL_AVAILABLE_EMPLOYEE, GET_ALL_SERVICE_REQUEST\r\n    ,GET_ERRORS,POST_ASSIGN_EMPLOYEE_REQUEST} from '../actions/types';\r\n\r\n\r\nexport const getAllServiceRequest = () => async dispatch => {\r\n\r\n    try {\r\n        const res = await axios.get('/api/company/service-request/all');\r\n        dispatch({\r\n            type:GET_ALL_SERVICE_REQUEST,\r\n            payload:res.data\r\n        });\r\n    } \r\n    catch (err) {\r\n        dispatch({\r\n            type: GET_ERRORS,\r\n            payload: err.response.data\r\n        });\r\n    }\r\n}\r\n\r\nexport const getAllAvailableEmployees = (request) => async dispatch => {\r\n\r\n    try{\r\n        console.log(\"request\",request);\r\n        const res = await axios.post('/api/company/service-request/available-employee',request);\r\n        dispatch({\r\n            type:GET_ALL_AVAILABLE_EMPLOYEE,\r\n            payload:res.data\r\n        });\r\n\r\n    }catch(err){\r\n        dispatch({\r\n            type: GET_ERRORS,\r\n            payload: err.response.data\r\n        });\r\n    }\r\n\r\n} \r\n\r\nexport const postAssignEmployeeRequest = (assignEmployeeRequest) => async dispatch  => {\r\n\r\n    try{\r\n        const res = await axios.post(\"/api/company/service-request/assignee-employee\",assignEmployeeRequest);\r\n        console.log(res);\r\n        dispatch({\r\n            type:POST_ASSIGN_EMPLOYEE_REQUEST,\r\n            payload:res.data\r\n        });\r\n      \r\n\r\n    }catch(err){\r\n        dispatch({\r\n            type:GET_ERRORS,\r\n            payload: err.response.data\r\n        });\r\n    }\r\n\r\n}","import React, { Component } from 'react'\r\nimport {connect} from 'react-redux';\r\n\r\nclass TimeSlotComponent extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        let timeSlotsViews = [];\r\n\r\n        const {availableTimeSlots ,onGenerateTimeSlotsClicks} = this.props;\r\n\r\n        if(availableTimeSlots!=null && availableTimeSlots.length>0){\r\n\r\n            for(let i=0 ; i<availableTimeSlots.length; i++){\r\n                const timeSlot = availableTimeSlots[i];\r\n                let cardClass = \"btn btn-info btn-sm m-1\";\r\n                if(timeSlot.availableEmployeeCount===0){\r\n                    cardClass=\"btn btn-danger btn-sm m-1\"\r\n                }\r\n\r\n                timeSlotsViews.push(\r\n                    <div className={cardClass}>{timeSlot.time} hrs<br/>\r\n                        <span class=\"badge badge-light\">{timeSlot.availableEmployeeCount} emp</span>\r\n                    </div>\r\n                );\r\n            }\r\n        }else{\r\n            timeSlotsViews.push(\r\n                <button className=\"btn btn-outline-danger\" \r\n                        onClick = {onGenerateTimeSlotsClicks.bind(this)}>\r\n                        Generate Time Slots\r\n                </button>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className=\"container\">\r\n              <h6 className=\"font-weight-bold\">Available Time Slots </h6>\r\n              <div className=\"row\">\r\n                    {  \r\n                        timeSlotsViews\r\n                    }\r\n              </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n \r\nconst mapStateToProp = (state)=>({\r\n\r\n});\r\n\r\nexport default connect(mapStateToProp,{})(TimeSlotComponent);\r\n","import React, { Component } from 'react'\r\nimport ServiceReqestItem from './ServiceReqestItem';\r\nimport PropTypes from 'prop-types';\r\nimport {connect} from 'react-redux';\r\nimport \"./ServiceRequestItem.css\";\r\nimport { getAllServiceRequest , getAllAvailableEmployees } from '../../actions/serviceRequestActions';\r\nimport { generateCompanyTimeSlotsForDate,getCompanyAvailableTimeSlotsByDate} from '../../actions/timeSlotsAction';\r\nimport {showLoader,hideLoader , resetErrorAction} from '../../actions/applicationAction';\r\nimport {ASSIGNED_SERVICE_REQ, CANCELED_SERVICE_REQ, COMPLETED_SERVICE_REQ, \r\n     INPROGRESS_SERVICE_REQ,  PENDING_SERVICE_REQ } from '../../constants/Constants';\r\nimport {Start_TIME,  End_TIME}   from '../../constants/Constants' \r\nimport { Modal } from 'react-bootstrap';\r\nimport ServiceRequestDetailsModal from './ServiceRequestDetailsModal';\r\nimport TimeSlotComponent from './TimeSlotComponent';\r\nimport BottomRedAlert from '../common/commonbottonalert/BottomRedAlert';\r\nimport store from '../../store';\r\n\r\nclass ServiceRequestDashboard extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            showServiceReqDetailModal:false,\r\n            selectedServiceReq:{},\r\n            selected_date: new Date().toISOString().split('T')[0],\r\n            // selected_date:'2021-06-08',\r\n            isLoading:false\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        store.dispatch(showLoader());\r\n        this.props.getAllServiceRequest();\r\n        this.props.getAllAvailableEmployees({date : this.state.selected_date});\r\n        this.props.getCompanyAvailableTimeSlotsByDate(this.state.selected_date);\r\n    }\r\n\r\n    openServiceReqDetailModal = (id) => {\r\n\r\n        const serviceReq = this.props.service_requests.filter(request => request.id===id)[0];\r\n        this.setState({\r\n            showServiceReqDetailModal:true,\r\n            selectedServiceReq:serviceReq\r\n        });\r\n    }\r\n\r\n    closeServiceReqDetailModal =(isRefresReq) => {\r\n\r\n        this.setState({\r\n            showServiceReqDetailModal:false,\r\n            selectedServiceReq:{}\r\n        },()=> {\r\n            if(isRefresReq){\r\n                store.dispatch(showLoader());\r\n                setTimeout(()=> {\r\n                    this.props.getAllServiceRequest();\r\n                    this.props.getAllAvailableEmployees( {date : this.state.selected_date});\r\n                    this.props.getCompanyAvailableTimeSlotsByDate(this.state.selected_date);\r\n                },2000);\r\n            }\r\n        });\r\n    }\r\n\r\n    onDateSelected = (e) => {\r\n        this.setState({selected_date:e.target.value} , ()=> {\r\n            this.props.getCompanyAvailableTimeSlotsByDate(this.state.selected_date);\r\n        })\r\n    }\r\n\r\n    onGenerateTimeSlotsClicks = (e) => {\r\n        e.preventDefault();\r\n        const request = {\r\n            currentDate:this.state.selected_date,\r\n            startTime : Start_TIME,\r\n            endTime : End_TIME\r\n        }\r\n        this.props.generateCompanyTimeSlotsForDate(request);\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps){\r\n\r\n        if(nextProps.available_time_slots){\r\n            store.dispatch(hideLoader());\r\n        }\r\n    }\r\n\r\n    componentWillUnmount(){\r\n      this.props.resetErrorAction();\r\n    }\r\n\r\n    render() {\r\n\r\n\r\n        const {service_requests , available_time_slots,errors} = this.props;\r\n        const {selected_date} = this.state;\r\n\r\n        let serviceReqComponent=[];\r\n\r\n        let pendingReq=[];\r\n        let assignedReq=[];\r\n        let inProgressReq=[];\r\n        let completedReq=[];\r\n        let cancelledReq=[];\r\n\r\n        if(service_requests!=null && service_requests.length>0){\r\n\r\n            for(let i=0;i<service_requests.length;i++){\r\n                const request = service_requests[i];\r\n                if(request.scheduleDate===selected_date) {\r\n                    serviceReqComponent.push(\r\n                        <ServiceReqestItem \r\n                                key={request.id}  \r\n                                serviceRequest = {request}    \r\n                                openServiceReqDetailModal={this.openServiceReqDetailModal}\r\n                                />\r\n                    )\r\n                }\r\n               \r\n            }\r\n\r\n            for(let i=0;i<serviceReqComponent.length;i++){\r\n            \r\n                let component = serviceReqComponent[i];\r\n                let statusCode=component.props.serviceRequest.statusCode;\r\n    \r\n                if(statusCode===PENDING_SERVICE_REQ){\r\n                    pendingReq.push(component);\r\n                }else if(statusCode===ASSIGNED_SERVICE_REQ){\r\n                    assignedReq.push(component);\r\n                } else if(statusCode===INPROGRESS_SERVICE_REQ){\r\n                    inProgressReq.push(component);\r\n                }else if(statusCode===COMPLETED_SERVICE_REQ){\r\n                    completedReq.push(component);\r\n                }else  if(statusCode===CANCELED_SERVICE_REQ){\r\n                    cancelledReq.push(component);\r\n                }else{\r\n                    cancelledReq.push(component);\r\n                }\r\n    \r\n            }\r\n        }\r\n\r\n        return (\r\n           <div className=\"container-fluid\">\r\n\r\n                <div className=\"row\">\r\n                    <form className=\"col-md-3\">\r\n                            <div className=\"form-group my-2\">\r\n                                <h6 className=\"font-weight-bold\">Date</h6>\r\n                                <input type=\"date\" className=\"form-control\" \r\n                                    value={this.state.selected_date}\r\n                                    name=\"selected_date\"\r\n                                    onChange={this.onDateSelected} />\r\n                            </div>\r\n                    </form>\r\n                    <div className=\"col-9 my-2\">\r\n                        <TimeSlotComponent \r\n                            availableTimeSlots = {available_time_slots}   \r\n                            onGenerateTimeSlotsClicks = {this.onGenerateTimeSlotsClicks}\r\n                        />\r\n                    </div>\r\n                </div>\r\n        \r\n                <div className=\"row text-center\">\r\n                    <div className=\"col-md-1\"></div>\r\n                    <div className=\"col-md-2\">\r\n                        <div className=\"py-1 bg-primary text-center text-white\">\r\n                            <h6>Pending</h6>\r\n                        </div>\r\n                        {\r\n                            pendingReq\r\n                        }\r\n\r\n                    </div>\r\n\r\n                    <div className=\"col-md-2\">\r\n                        <div className=\"py-1 text-center bg-secondary text-white\">\r\n                            <h6>Assigned</h6>\r\n                        </div>\r\n                        {\r\n                            assignedReq\r\n                        }\r\n                    </div>\r\n\r\n                    <div className=\"col-md-2\">\r\n                        <div className=\"py-1 text-center bg-warning text-white\">\r\n                            <h6>In-Progress</h6>\r\n                        </div>\r\n                        {\r\n                            inProgressReq\r\n                        }\r\n                    </div>\r\n\r\n                    <div className=\"col-md-2\">\r\n                        <div className=\"py-1 text-center bg-success text-white\">\r\n                            <h6>Completed</h6>\r\n                        </div>\r\n\r\n                        {\r\n                            completedReq\r\n                        }\r\n                    </div>\r\n\r\n                    <div className=\"col-md-2\">\r\n                        <div className=\"py-1 bg-info text-center bg-danger text-white\">\r\n                           <h6>Cancelled</h6>\r\n                        </div>\r\n                        {\r\n                            cancelledReq\r\n                        }\r\n                    </div>\r\n                    <div className=\"col-md-1\"></div>\r\n                </div>\r\n                {\r\n                    errors.errorMsg && (\r\n                        <div className=\"fixed-bottom\">\r\n                             <BottomRedAlert errorMsg = {errors.errorMsg}  />\r\n                        </div>\r\n                    )\r\n                }\r\n                <Modal\r\n                    show={this.state.showServiceReqDetailModal}\r\n                    onHide={this.closeServiceReqDetailModal}\r\n                    size=\"lg\"\r\n                        backdrop=\"static\"\r\n                        centered>\r\n\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title className=\"text-secondary\" >{this.state.selectedServiceReq.serviceReqCode}</Modal.Title>\r\n                    </Modal.Header>\r\n\r\n                    <Modal.Body>\r\n                        <ServiceRequestDetailsModal \r\n                            serviceRequest = {this.state.selectedServiceReq}\r\n                            availableEmployees={this.props.availableEmployees}\r\n                            closeServiceReqDetailModal= {this.closeServiceReqDetailModal}\r\n\r\n                        />\r\n                    </Modal.Body>\r\n\r\n                </Modal>\r\n\r\n           </div>\r\n        )\r\n    }\r\n}\r\n\r\nServiceRequestDashboard.propTypes = {\r\n    getAllServiceRequest : PropTypes.func.isRequired,\r\n    getAllAvailableEmployees: PropTypes.func.isRequired,\r\n    service_requests : PropTypes.array.isRequired,\r\n    availableEmployees:PropTypes.array.isRequired,\r\n    resetErrorAction : PropTypes.func.isRequired,\r\n    errors: PropTypes.object.isRequired\r\n}\r\n\r\nconst mapStateToProp = (state)=>({\r\n    service_requests:state.serviceRequest.service_requests,\r\n    availableEmployees:state.serviceRequest.availableEmployees,\r\n    available_time_slots: state.timeSlots.available_time_slots,\r\n    errors: state.errors,\r\n})\r\n\r\nexport default connect(mapStateToProp,{\r\n    getAllServiceRequest,\r\n    getAllAvailableEmployees,\r\n    generateCompanyTimeSlotsForDate,\r\n    getCompanyAvailableTimeSlotsByDate,\r\n    resetErrorAction\r\n})(ServiceRequestDashboard);\r\n","import axios from \"axios\";\r\nimport {\r\n    GET_COMPANY_AVAILABLE_TIME_SLOTS_BY_DATE,\r\n    GET_ERRORS\r\n} from './types';\r\n\r\n\r\nexport const getCompanyAvailableTimeSlotsByDate = (date) => async dispatch => {\r\n\r\n    try{\r\n        const res = await axios.get(`/api/company/time-slots/${date}`);\r\n        dispatch({\r\n            type:GET_COMPANY_AVAILABLE_TIME_SLOTS_BY_DATE,\r\n            payload:res.data\r\n        });\r\n\r\n    }catch(err){\r\n        dispatch({\r\n            type:GET_ERRORS,\r\n            payload:err.response.data\r\n        });\r\n    }\r\n\r\n}\r\n\r\nexport const generateCompanyTimeSlotsForDate=(request)=> async dispatch => {\r\n\r\n    try{\r\n        const res = await axios.post(`/api/company/time-slots`,request);\r\n        dispatch({\r\n            type:GET_COMPANY_AVAILABLE_TIME_SLOTS_BY_DATE,\r\n            payload:res.data.response\r\n        });\r\n    }catch(err){\r\n        dispatch({\r\n            type:GET_ERRORS,\r\n            payload:err.response.data\r\n        });\r\n    }\r\n\r\n}","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport './FullPageLoader.css';\r\n\r\nclass FullPageLoader extends Component {\r\n\r\n    render() {\r\n        const {isLoading} = this.props;\r\n        \r\n        if(!isLoading) return null;\r\n\r\n        return (\r\n            <div className=\"loader-container\">\r\n                <div className=\"loader\">\r\n                    <img src = {process.env.PUBLIC_URL + '/gifassets/loader.gif'}/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n    isLoading : state.application.isLoading\r\n})\r\n\r\nexport default connect(mapStateToProps)(FullPageLoader);\r\n","import React, { Component } from 'react';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.css\";\r\nimport { Provider } from 'react-redux';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport store from './store';\r\nimport NavBar from './components/layouts/NavBar';\r\nimport Dashboard from './components/dashboard/Dashboard';\r\nimport UpdateService from './components/service/UpdateService';\r\nimport EmployeeListDashboard from './components/employees/EmployeeListDashboard';\r\nimport AddEmployee from './components/employees/AddEmployee';\r\nimport UpdateEmployee from './components/employees/UpdateEmployee';\r\nimport AddService from './components/service/AddService';\r\nimport CreateService from './components/service/CreateService';\r\nimport MapServiceToEmployee from './components/employees/MapServiceToEmployee';\r\nimport CreateAsset from './components/asset/CreateAsset';\r\nimport AssetList from './components/asset/AssetList';\r\nimport UpdateAsset from './components/asset/UpdateAsset';\r\nimport Landing from './components/layouts/Landing';\r\nimport RegisterCompany from './components/usermanagement/RegisterCompany';\r\nimport Login from './components/usermanagement/Login';\r\nimport jwt_decode from 'jwt-decode';\r\nimport setJWTTokenInHeader from './securityUtils/setJWTTokenInHeader';\r\nimport { SET_CURRENT_COMPANY } from './actions/types';\r\nimport { logOut } from './actions/securityActions';\r\nimport SecuredRoute from './securityUtils/SecuredRoute';\r\nimport ServiceRequestDashboard from './components/serviceRequests/ServiceRequestDashboard';\r\nimport FullPageLoader from './components/common/fullPageloader/FullPageLoader';\r\n\r\n//For Security using JWT\r\nconst jwtToken = localStorage.getItem(\"jwtToken\");\r\n\r\nif (jwtToken) {\r\n  setJWTTokenInHeader(jwtToken)\r\n\r\n  const decoded = jwt_decode(jwtToken);  //Not decoding currently as no claims added\r\n\r\n  const companySecurityInfo = {\r\n    companyCode: decoded.sub,\r\n    jwtInfo: decoded\r\n  };\r\n\r\n  store.dispatch({\r\n    type: SET_CURRENT_COMPANY,\r\n    payload: companySecurityInfo\r\n  });\r\n\r\n  //If token is expired \r\n  const currentTime = Date.now() / 1000;\r\n  if (decoded.exp < currentTime) {\r\n\r\n    //handle logout\r\n    store.dispatch(logOut());\r\n    // logOut();   // this also can be used\r\n\r\n    // re-directing to main page\r\n    window.location.href = \"/\"\r\n  }\r\n\r\n}\r\n\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Provider store={store}>\r\n        <Router>\r\n          <div className=\"App\">\r\n            <NavBar />\r\n            {\r\n              //Public Routes\r\n            }\r\n            <Route exact path=\"/\" component={Landing} />\r\n            <Route exact path=\"/registercompany\" component={RegisterCompany} />\r\n            <Route exact path=\"/login\" component={Login} />\r\n            <Route exact path=\"/createservice\" component={CreateService} />\r\n            {\r\n              //Private Routes\r\n            }\r\n            <Switch>\r\n              <SecuredRoute exact path=\"/dashboard\" component={Dashboard} />\r\n              <SecuredRoute exact path=\"/updateservice/:serviceCode\" component={UpdateService} />\r\n              <SecuredRoute exact path=\"/employees\" component={EmployeeListDashboard} />\r\n              <SecuredRoute exact path=\"/addemployee\" component={AddEmployee} />\r\n              <SecuredRoute exact path=\"/updateemployee/:employeecode\" component={UpdateEmployee} />\r\n              <SecuredRoute exact path=\"/addservice\" component={AddService} />\r\n              <SecuredRoute exact path=\"/assignservice\" component={MapServiceToEmployee} />\r\n              <SecuredRoute exact path=\"/assetlist\" component={AssetList} />\r\n              <SecuredRoute exact path=\"/createasset\" component={CreateAsset} />\r\n              <SecuredRoute exact path=\"/updateasset/:assetcode\" component={UpdateAsset} />\r\n\r\n              <SecuredRoute exact path=\"/servicerequests\" component={ServiceRequestDashboard} />\r\n\r\n            </Switch>\r\n            \r\n            { \r\n              //Loader \r\n            }\r\n            <FullPageLoader/>\r\n\r\n          </div>\r\n        </Router>\r\n      </Provider>\r\n    );\r\n  }\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}