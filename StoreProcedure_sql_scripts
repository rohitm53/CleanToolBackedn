------------------------------------------------------------------------------------------------------------------------

1. SP for generating Employee code

    DELIMITER $$
        drop procedure if exists sp_generateEmployeeCode;
    CREATE PROCEDURE `sp_generateEmployeeCode`(in empId int , out empCode varchar(20))
    begin
        update employee set employee_code=concat("e",lower(first_name),'0',cast(id as char)) where id=empId;
        select employee_code into empCode  from employee where id=empId;
        end$$
    DELIMITER ;



------------------------------------------------------------------------------------------------------------------------


2. SP for Deleting employee by employeecode

    DELIMITER $$
    CREATE DEFINER=`root`@`localhost` PROCEDURE `deleteEmployeeByCode`(in empCode varchar(50))
    begin
        -- declarring variable
        declare employeeId int;
        declare employeeCredentialId int;

        -- declare error
        declare exit handler for sqlexception
        begin
            show errors;
        end;

        declare exit handler for sqlwarning
        begin
            show warnings;
        end;

        start transaction;
        -- selecting ids into local variable
        select id into employeeId from employee where employee_code=empCode;
        select id into employeeCredentialId from employee_credential where employee_code=empCode;

        -- deleting records by id
        Delete from employee where id=employeeId;
        Delete from employee_credential where id=employeeCredentialId;
        commit;
    end$$
    DELIMITER ;


------------------------------------------------------------------------------------------------------------------------


3. SP to delete company service by companycode

    drop procedure if exists sp_deleteCompanyServiceByCompanyCode;
    DELIMITER $$
    CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_deleteCompanyServiceByCompanyCode`(in the_company_code varchar(20))
    begin
    	-- declaration
    	declare current_id varchar(10) ;
        declare count int default 0;
        declare counter int default 0;
        declare str_ids varchar(50) default "";
        declare delete_query varchar(500) default null;
        declare finished boolean default false;
    	declare id_cursor cursor for select id from company_service where company_code=the_company_code;
        declare continue handler for not found set finished :=true;

       select count(*) into count from company_service where company_code=the_company_code;

       if count > 0 then
    		open id_cursor;
    			id_loop:loop
    				fetch id_cursor into current_id;
    				-- loop terminating handler
    				if finished then
    					set str_ids := concat(str_ids,")");
    					leave id_loop;
    				end if;

    				if counter=0 then
    					 set str_ids := concat(str_ids,"(",current_id);
    				else
    					 set str_ids := concat(str_ids,",",current_id);
    				end if;
    				set counter := counter+1;
    			end loop id_loop;
    		close id_cursor	;

    		set delete_query := concat("delete from company_service where id in",str_ids);
    		set @delete_query = delete_query;
    		prepare stmt from @delete_query;
    		execute stmt;
    		deallocate prepare stmt;
        else
    		select "No data to delete";
       end if;
    commit;
    end$$
    DELIMITER ;


------------------------------------------------------------------------------------------------------------------------


4. SP to delete employee service by companycode.
    DELIMITER //
    drop procedure if exists sp_deleteEmployeeServiceByCompanyCode;
    create procedure sp_deleteEmployeeServiceByCompanyCode(in the_companyCode varchar(20))
    begin
        declare current_id varchar(10);
        declare count int default 0;
        declare counter int default 0;
        declare str_ids varchar(50) default "";
        declare delete_query varchar(500) default null;
        declare finished boolean default false;
        declare id_cursor cursor for select id from employee_service where company_code=the_companyCode;
        declare continue handler for not found set finished:=true;

        select count(*) into count from employee_service where company_code=the_companyCode;
        if count > 0 then
            open id_cursor;
            id_loop:loop
                fetch id_cursor into current_id;
                if finished then
                    set str_ids := concat(str_ids,")");
                    leave id_loop;
                end if;
                if counter=0 then
                    set str_ids := concat(str_ids,"(",current_id);
                else
                    set str_ids := concat(str_ids,",",current_id);
                end if;
                set counter := counter+1;
            end loop id_loop;
            close id_cursor;
            set delete_query := concat("delete from employee_service where id in ",str_ids);
            set @delete_query =  delete_query;
            prepare stmt from @delete_query;
            execute stmt;
            deallocate prepare stmt;
         else
            select "No Data available to delete";
        end if;
        commit;
    end//
    DELIMITER ;
    drop procedure sp_deleteEmployeeServiceByCompanyCode;
    call sp_deleteEmployeeServiceByCompanyCode("WINIT");


------------------------------------------------------------------------------------------------------------------------


5. SP to create Mobile user code generateMobileUserCode

    DELIMITER $$
        drop procedure if exists sp_generateMobileUserCode;
        CREATE PROCEDURE `sp_generateMobileUserCode`(in mobile_user_id int , out out_mobile_user_code varchar(50))
        begin
                update mobile_user set mobile_user_code=concat("m",lower(first_name),'0',cast(id as char)) where id=mobile_user_id;
                select mobile_user_code into out_mobile_user_code from mobile_user where id=mobile_user_id;
        end$$
    DELIMITER ;


set @out_mobile_user_code:=""
call sp_generateMobileUserCode(1,@out_mobile_user_code);


------------------------------------------------------------------------------------------------------------------------

6. SP to insert service master data

    DELIMITER $$
    	drop procedure if exists sp_Intialise_Service_Master;
    	create procedure sp_Intialise_Service_Master()
    		begin
    			TRUNCATE TABLE services;
    			INSERT INTO services(service_code,service_name,no_of_emp_req,create_at) VALUES ('UT','Utensils',1,now());
    			INSERT INTO services(service_code,service_name,no_of_emp_req,create_at) VALUES ('MPB','Mopping/Brooming',1,now());
    			INSERT INTO services(service_code,service_name,no_of_emp_req,create_at) VALUES ('BTH','Bathroom',1,now());
    			INSERT INTO services(service_code,service_name,no_of_emp_req,create_at) VALUES ('TLT','Toilet',1,now());

    			INSERT INTO services(service_code,service_name,no_of_emp_req,create_at) VALUES ('KT','Kitchen',1,now());
    			INSERT INTO services(service_code,service_name,no_of_emp_req,create_at) VALUES ('OFC','Office',1,now());
    			INSERT INTO services(service_code,service_name,no_of_emp_req,create_at) VALUES ('WRH','Warehouse',1,now());

    			INSERT INTO services(service_code,service_name,no_of_emp_req,create_at) VALUES ('CLTH','Clothes',1,now());
    			INSERT INTO services(service_code,service_name,no_of_emp_req,create_at) VALUES ('DRCLNG','Dry Cleaning',1,now());
    			INSERT INTO services(service_code,service_name,no_of_emp_req,create_at) VALUES ('IRNG','Ironing',1,now());

    			commit;
    		end $$
    DELIMITER ;

    call sp_Intialise_Service_Master()

------------------------------------------------------------------------------------------------------------------------

7. SP to insert time slots master data

    DELIMITER $$
    drop procedure if exists sp_TimeSlot_Master;
    CREATE  PROCEDURE `sp_TimeSlot_Master`()
    begin
                    TRUNCATE TABLE time_slots;
                    insert into time_slots(slot_code,time) values('T1',(NOW() + interval 1 hour));
                    insert into time_slots(slot_code,time) values('T2',(NOW() + interval 2 hour));
                    insert into time_slots(slot_code,time) values('T3',(NOW() + interval 3 hour));
                    insert into time_slots(slot_code,time) values('T4',(NOW() + interval 4 hour));
                    insert into time_slots(slot_code,time) values('T5',(NOW() + interval 5 hour));
                    insert into time_slots(slot_code,time) values('T6',(NOW() + interval 6 hour));
                    insert into time_slots(slot_code,time) values('T7',(NOW() + interval 7 hour));
                    insert into time_slots(slot_code,time) values('T8',(NOW() + interval 8 hour));

                    commit;
                end$$
    DELIMITER ;

------------------------------------------------------------------------------------------------------------------------

8. SP to generate Service Request Code

    DELIMITER $$
    drop procedure if exists sp_Generate_Service_RequestCode;
    CREATE PROCEDURE sp_Generate_Service_RequestCode (in service_req_id int, out service_req_code varchar(50))
    begin
    			select concat(upper(company_code) , upper(mobile_user_code) , upper(service_code),floor(RAND()*10000))
    						into service_req_code  from service_request where id=service_req_id;

                update service_request set service_req_code=service_req_code where id=service_req_id;
    end$$
    DELIMITER ;


    set @service_req_code:='';
    call sp_Generate_Service_RequestCode(1,@service_req_code);

    select @service_req_code;


